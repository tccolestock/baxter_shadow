#!/usr/bin/env python

# Psuedo code:
# This script will allow the shadow hand & UR10 to pick up a "bottle" and then deliver it to the Baxter robot. The Biotac sensors will serve as the feedback to the SH and to the Baxter.
#
#     - Shadow moves into position. No feedbackself.
#     - Shadow grabs the bottle.
#         - Use Biotac feedback to properly grab the object?
#         - Use BT feedback to ensure the object is grabbed.
#             -   NN classification of "neutral" or "grabbed".
#     - Shadow moves to the release position.
#         - The BT proof that the object is still in its hand triggers Baxter to start.
#     - Baxter will reach for the object (Different Script)
#         - Baxter uses its gripper feedback to ensure the object is grasped.
#     - Baxter pulls up on the object, causing a shadow classification that slip is occuring.
#         - If the slip is upward, shadow will release the object.
#             - Using a moving average, normalized with reference. Based on grasp_4_norm.
#             - Angular fitted classification.
#     - After Baxter has the object shadow returns to the start position.
#     - Baxter places the object in a new location outside of shadow's reach.
#


from __future__ import division
import rospy
from std_msgs.msg import String, Float32, UInt8
from sr_robot_commander.sr_arm_commander import SrArmCommander
from sr_robot_commander.sr_hand_commander import SrHandCommander
from sr_robot_msgs.msg import BiotacAll
import time
import numpy as np # for: exp(), .shape, array, matrix
import numpy.matlib as npm # for: npm.repmat()
import zmq
import msgpack


rospy.init_node("move_test", anonymous=True)

context = zmq.Context()
socket = context.socket(zmq.PUB)
socket.bind("tcp://*:5556")


hand_commander = SrHandCommander()
arm_commander = SrArmCommander()

time.sleep(1)

# =============== Define Slip Class ===============
class Slip(object):
    """docstring for Slip"""
    def __init__(self):
        self.last3 = [0]*15
        self.mvavg = 0
        self.base = [] #np.matrix( np.zeros((26,1)) )
        self.flag = 0
    def new(self, x):
        self.last3.pop()
        self.last3.insert(0,x)
        self.update()
    def update(self):
        self.mvavg = sum(self.last3)/len(self.last3)
    def rebase(self, x):
        self.base = x
        self.flag = 1


# =============== Define Listen (Subscriber) Function ===============
def listen():
    rospy.Subscriber("/rh/tactile/", BiotacAll, callback)
    rospy.spin()


# =============== Define Callback Function ===============
def callback(data):
    realtime = list(data.tactiles[0].electrodes) # comes in as a Tuple, convert to list
    realtime.append(data.tactiles[0].pac1) # append the Pac1 value
    realtime.append(data.tactiles[0].pdc)
    if slip.flag == 0:
        slip.rebase(realtime)
    else:
        checkGrasp(data) # check that shadow has the object and send boolean to Baxter
        features = np.array([0]*26)
        s = sum(realtime[:24])
        s = s/(100*1000) # *100 to make it a %, *1000 to scale it to same mag as pressure
        features[:24] = np.array(realtime[:24])/s
        features[24:] = realtime[24:]
        features = np.matrix(features) # convert list to numpy matrix
        angle = nnfitting(features.T) # transpose matrix to create column vector(s)
        slip.new(angle)
        # print("slip: %f" % slip.mvavg)
        print("slip: %f" % angle)
        if (slip.mvavg > 179) and (slip.mvavg < 190):
            print("Upward slip detected!")
            # Release the object
            joint_goals = hand_start
            hand_commander.move_to_joint_value_target_unsafe(joint_goals, 2, True)
            # Move back to start
            time.sleep(5)
            joint_goals = arm_start
            arm_commander.move_to_joint_value_target_unsafe(joint_goals,5,True)

            time.sleep(1)
            rospy.signal_shutdown("Slip was Detected")


def checkGrasp(bios):
    first_pdc = bios.tactiles[0].pdc
    thumb_pdc = bios.tactiles[4].pdc
    if (first_pdc > 2300) and (thumb_pdc > 1700):
        msg = 1
    else:
        msg = 0
    print(msg)
    packed = msgpack.dumps(msg)
    socket.send(packed)


# =============== Define NN Fitting Function ===============
def nnfitting(x1): # input all 24 electrodes, and Pac1 in column array

    # --------------- Input Layer ---------------
    x1_step1_xoffset = np.matrix( \
        [\
            [3765.39023372287010715809],\
            [4297.52712854758010507794],\
            [3196.00792161768004007172],\
            [3569.75105683418996704859],\
            [3584.05636375496987966471],\
            [3139.18897761077005270636],\
            [3866.03320455257016874384],\
            [4209.45798999588987499010],\
            [4172.75764853294003842166],\
            [3747.25905816017984761856],\
            [3879.18421353961002751021],\
            [4355.25403585223011759808],\
            [3197.43390654634004022228],\
            [3518.19558825401009016787],\
            [2891.73427991886001109378],\
            [3227.07845731149018320139],\
            [3764.99319502918979196693],\
            [4133.14324676130036095856],\
            [3578.46233882056003494654],\
            [3222.91287649080004484858],\
            [4410.15526344273985159816],\
            [4317.11436284964020160260],\
            [4329.28001538017997518182],\
            [4058.60681564787000752403],\
            [1225.00000000000000000000],\
            [2149.00000000000000000000]\
        ])     # size(x1_step1_xoffset) = 26x1

    x1_step1_gain = np.matrix( \
        [\
            [0.00247521855046878986],\
            [0.00466084262162979983],\
            [0.00135029571927940996],\
            [0.00172707112705488999],\
            [0.00226976135537762004],\
            [0.00132083751299503995],\
            [0.00223594229103833003],\
            [0.00699765214202364982],\
            [0.00563910423081966008],\
            [0.00294411724141841000],\
            [0.00248783850820105982],\
            [0.00452231556741184999],\
            [0.00120855396152154989],\
            [0.00181861408304252996],\
            [0.00149479794736294001],\
            [0.00122139190225452007],\
            [0.00219512240840361982],\
            [0.00508483513322679007],\
            [0.00500412431808121023],\
            [0.00322069375754667009],\
            [0.00907388234344221924],\
            [0.00600470721686368995],\
            [0.00905842375112637932],\
            [0.00762383339135397006],\
            [0.00090950432014552099],\
            [0.00781250000000000000]\
        ])     # size(x1_step1_gain) = 26x1

    x1_step1_ymin = -1;

    # --------------- Layer 1 ---------------
    b1 = np.matrix( \
        [\
            [   0.26838536454673106446],\
            [  -4.77924501786588518115],\
            [  -1.01152459047504894585],\
            [  -1.78415519218587315109],\
            [   2.20058933052535676822],\
            [  -1.41039645846901740001],\
            [   5.98034948443642910831],\
            [   0.56446966636340467627],\
            [   4.62813737371747713212],\
            [  11.04240050271424600226]\
        ] ) # size(b1) = 10x1

    IW1_1 = np.matrix( \
        [\
            [  -1.02779273668982229495,   0.42739086461596986766,   0.10590589039016440331,   1.30577126851409697217,   3.58373617501668961793,  -7.34849135026865063480,   2.03741801220004870032,   2.61731738077549369592,   1.27111772821779478448,   3.77982715091008936170,   8.73568624882928368436,   1.18839563617701160503,  -2.49958300635200059148,  -0.07163724122223913415,  -1.63827823017438345410,   0.19322823685478229816,   1.40077806151929196155,   1.12975533442239872706,   0.60973632387964915580,  -2.87839446659904396597,   1.83186826767636801172,   0.96237115176318266396,   0.37697675606640834722,  -2.65309859268229297768,   3.64976407745848030473,   0.94181912361215314178],\
            [  -6.40284536854770180980,  -2.82895010928042367482,   4.67143022739184221592,   0.09194105868743437937,  -2.42169521506597273941,   5.31274669020440715173,  -1.98448590337220442947,   0.25307314558438909202,   2.24612475097183983408,   0.64613895720713432347, -11.99772774648098661032,  -1.65861786909298958292,  -8.21604772707005004406,   7.14512814646440208577,   2.61594823600893455762,   1.42334027444032562570,   1.43989500866265540679,  -3.19044990266143191349,   1.59128436754480295789,   0.25455626027371136555,  -0.55816699652343526594,   0.73837316417836973415,   3.08833411005969260543,   3.83238726442686816753,  -1.22386344131422730719,   7.45798655504318119824],\
            [   4.83281974938268721331,   0.70312140806054124198,   4.29038500851582327300,  -5.58857440971540242458,  -9.20314316473622184844,   4.24850579573620379392,  -5.67162169924614634198,   1.56970020046935254676,   3.44914233286486782148,  -3.33755097384708498964,  -4.53437891745206123062,   0.45689685644934013853,   1.51151924247264801693,  -6.83337968022853115002,   0.38671464647854181251,  20.80376941851842786946,  -4.56335643177598182518,  -0.38989805947128997055,   2.44252042425931170655, -19.04566822302153639157,  -3.01769034160947891010, -14.22950651511889397227,  -3.87045581394276805298,  -8.45970278739843628557,  -0.85355846453474359947,  -0.94018091354105415292],\
            [   0.27659081886113850990,   0.29257561138406235068,   2.29598008786591023522,   1.13087189628455986323,   0.08158752418120673866,  -1.16797074276512291569,   0.88349855355830575476,   0.16798782740916090583,   0.26860523708869887827,   0.52609528226095481074,   1.77363909864763025226,   0.75534251151680220637,   3.09917872564935681368,   1.08994346668936348266,  -1.14208774761935716313,  -4.84385925551318141657,  -1.38155295655279219957,   0.09805870881613203138,  -0.25413502266044452060,  -2.26703973917871204335,   0.16137070871536912664,   0.16051095590226976961,   0.18222307473911064646,   0.15371263666670337278,   0.24619309270934736089,  -1.85332725550000909642],\
            [   2.57194816751645749520,   1.91328233829849692071,   4.92470162187915505569,  -6.97446006531168549714,  -1.50650493031001264654,  -1.31310384691115666911,   3.22252588895981118000,  -0.71511206680599470609,  -1.34402740999698711022,  -3.26369204726852091270,  -8.81061849102062311090,  -0.05755059809192347720,  -8.19717507424228841728,   5.52592736809228757267,   1.08261126215432001985,   5.03227290941006355496,   7.24962109974487578512,   0.97776305261326401652,   3.06286685592777940812,  -4.51911566163689926157,   0.63421739975361801633,  -0.81230133917180591396,   1.12285325674444580457,   2.46898621397782491727,  -0.75731623750950860519,  -4.19180634348938419009],\
            [   5.72172204721829036345,  -0.77170206568605415054,  -0.19787526190209184240,  -0.25750895300784448771,   1.14301163568673147530,   1.58747453627724244285,  -2.13023019152425963085,  -1.19076570396711711730,  -1.56810847987525692204,   3.18590668314203107059,   3.59985098193953145795,   1.59460612249646582761,   1.61238511337297851789, -10.24642270855311210198,   3.14599639893208049557,  -9.01429198553805832717,   2.14582927881278084925,   0.91782715112954693648,   2.21658139863937853065,   8.19612335395055602305,   1.23743374891054447318,   1.09151165458212395798,  -1.89067605895051071840,  -1.34165555929807589486,   3.06091282070576431451,   4.32577667839420243467],\
            [   2.96235580468419712474,   0.55824106737339107553,  -0.51125871221332885863,   4.01959557785662546792,  -0.20872484457653917023,  -2.22067606657318439289,   0.35757183119130864224,  -1.13815074113187364446,  -0.40311836992825211823,   0.08568312278355419420,   4.40641601523532422391,   0.72203529256387877222,  -5.20256246488663975924,  -2.32475942848704830723,   3.94648599058027560460,  -1.92138011224968652257,   3.13794410581067051424,   1.60852391327388999365,   1.85604940895124803646,  -0.44338972046369767854,   0.59919304131320039186,   0.80204824165824906146,  -0.75283697495786050524,   2.29391944417003790235,   0.81816153588415185816,   2.32719083584317365521],\
            [  -3.19512987618476618223,  -1.81435917176128969075,   3.38430940412367409209,  -1.74049295531524794711,   1.23939536361905155992,  -4.73473033976427348790,   3.80258659818725641699,  -0.22910165037394758514,   0.10958684514949888766,  -0.48423750383486380278,  -0.75045874277433832766,   3.45315060997037859281,   9.50873042435216397905,   2.73490121936063967922,   0.21166832817512126752,  -7.36114617549405547692,  -0.13021603255839156454,  -0.82807640215120925653,  -1.70740307083320885795,  -4.94177735872173062859,   0.26371771358841572530,  -1.86345588461638778099,  -0.80744358141506678006,   2.00411533896740046146,   3.11354583019003028355,   1.34957178525213095099],\
            [  -0.91856554081383534616,   0.99065042739711361985,   0.22950166519684761512,  -0.08918962484016085268,  -0.86529098643677548885,  -0.55335668149524575021,   1.14388421126463613042,  -0.63713307209396363717,  -0.66953074000831236390,  -5.32084699282831952161,  -9.51027439060337442811,  -0.06853575152218410738,  -8.10222943031708453532,  -0.63247592542078467925,   3.50822934473981407066,  12.62664363383006183028,   4.64710986804253778359,  -0.39992020367058489505,   3.21815825813605149719,  -6.08667262605869829883,  -0.19865354694012579695,  -0.31264219119117153678,   0.78468385669165363616,   3.01380217067972866474,  -1.57838635562354134834,   1.43419078138348421447],\
            [   1.76786343531539702489,   2.16921326107502165925,  -0.14489130856696175176,  -3.16912873640206571579,  -5.37512654047695548343,   1.66319665328405230653,  -2.66485885256180843328,  -6.58407423275472325486,  -7.03881643355754071933,  -4.78179673541977567908,   7.24307093799352141872,   3.39212264987481182388,   9.64560636991556918929,   7.59173311521770965982,  -6.37735040387463314460,   3.92894724452927635028,  -1.22153554411376119582, -11.47212811658778974788,  -4.91844571423694265633,  -6.73366175476513806331,   6.99146164440283790498,  -3.17677967872459587895,   3.11530084294985609716, -16.55389842274876599504,   1.16691874879903756401,  12.01092342482881747401]\
        ] ) # size(IW1_1) = 10x26

    # --------------- Layer 2 ---------------
    b2 = -0.0459

    LW2_1 = np.matrix( \
        [\
            [ 0.05296482001907663884,  -0.02194141515279638549,   0.36373830543680624183,  -0.48649256935096396592, -0.05269154414900396183,  -0.03227497017294599785,  -0.00116264395552163197,  0.03719611080948523330,   0.08258828520995584177,   0.02451615629873877406]\
        ] ) # size(LW2_1) = 1x10

    # --------------- Output 1 ---------------
    y1_step1_ymin = -1
    y1_step1_gain = 0.005555555555556
    y1_step1_xoffset = -180

    # --------------- SIMULATION ---------------

    # Dimensions
    Q = x1.shape[1]
    # Input 1
    xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin) # size = 25x1
    # Layer 1
    a1 = tansig_apply(npm.repmat(b1,1,Q) + np.dot(IW1_1,xp1)) # 10xQ to function size = 10xQ(1)
     # Layer 2
    a2 = npm.repmat(b2,1,Q) + np.dot(LW2_1,a1)
     # Output 1
    y1 = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);

    return y1
# end nnfitting function call

# =============== NN MODULE (Support) FUNCTIONS ===============

# Map Minimum and Maximum Input Processing Function
def mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin):
    y = x - settings_xoffset
    y = np.multiply(y,settings_gain)
    y = y + settings_ymin
    return(y)

# Sigmoid Symmetric Transfer Function
def tansig_apply(n):
    a = 2 / (1 + np.exp(-2*n)) -1
    return(a)

# Map Minimum and Maximum Output Reverse-Processing Function
def mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin):
    x = y - settings_ymin
    x = x / settings_gain
    x = x + settings_xoffset
    return(x)


# =============== Define Position Dictionaries ===============

# --------------- Hand Positions ---------------
hand_start = { \
            'rh_FFJ1': -0.013387468694274651,   'rh_FFJ2': 0.10550124582950798,     \
            'rh_FFJ3': -0.07913645703418956,    'rh_FFJ4': -0.020790969983510318,   \
            'rh_THJ4': 0.8987090669167258,      'rh_THJ5': -1.0529838245665772,     \
            'rh_THJ1': 0.36613957472880915,     'rh_THJ2': -0.3099264451304632,     \
            'rh_THJ3': 0.04339213288734181,     'rh_LFJ2': 0.31856120196799154,     \
            'rh_LFJ3': -0.13247924347682977,    'rh_LFJ1': 0.020856552138779016,    \
            'rh_LFJ4': 0.006156109478006114,    'rh_LFJ5': 0.030368858695598477,    \
            'rh_RFJ4': -0.017502072148899307,   'rh_RFJ1': 0.04862574836081379,     \
            'rh_RFJ2': 0.23106641618794493,     'rh_RFJ3': -0.040169677117662395,   \
            'rh_MFJ1': 0.0061621824517631985,   'rh_MFJ3': -0.03814186780706377,    \
            'rh_MFJ2': 0.28535536916148746,     'rh_MFJ4': 0.005735133335643892,    \
        }

hand_close = { \
            'rh_FFJ1': 0.5366228138727492,      'rh_FFJ2': 1.3707472622836295,      \
            'rh_FFJ3': 0.6104890181588297,      'rh_FFJ4': -0.1693188654196813,     \
            'rh_THJ4': 1.1494816044032174,      'rh_THJ5': -0.25236240595266746,    \
            'rh_THJ1': 1.0564478227578378,      'rh_THJ2': 0.5591902548242037,      \
            'rh_THJ3': 0.3010860128238289,      'rh_LFJ2': 1.1510589476677358,      \
            'rh_LFJ3': 0.3496450123403709,      'rh_LFJ1': 0.2812655031286765,      \
            'rh_LFJ4': 0.0007317935784767475,   'rh_LFJ5': 0.038378063907728126,    \
            'rh_RFJ4': -0.030822436892029084,   'rh_RFJ1': 0.2252787835450361,      \
            'rh_RFJ2': 1.1696882711839942,      'rh_RFJ3': 0.6358242015720096,      \
            'rh_MFJ1': 0.18990725919524606,     'rh_MFJ3': 0.6792600589796994,      \
            'rh_MFJ2': 1.3251573950327318,      'rh_MFJ4': -0.007377111269187729,   \
        }

# hand_soft_open = { \
#                 'rh_FFJ1': 0.015299964222028228,    'rh_FFJ2': 1.0363475765685581,      \
#                 'rh_FFJ3': 0.2156981911673815,      'rh_FFJ4': -0.09041898402453244,    \
#                 'rh_THJ4': 1.1566064166609298,      'rh_THJ5': -0.4976068025062665,     \
#                 'rh_THJ1': 0.7331455374652653,      'rh_THJ2': 0.24076301002605377,     \
#                 'rh_THJ3': 0.2482866853523483,      'rh_LFJ2': 0.9579282517503304,      \
#                 'rh_LFJ3': 0.22891073506641474,     'rh_LFJ1': 0.0369458923601228,      \
#                 'rh_LFJ4': -0.010122565656606665,   'rh_LFJ5': 0.03884889211514442,     \
#                 'rh_RFJ4': -0.03515217103578468,    'rh_RFJ1': 0.06709122242188231,     \
#                 'rh_RFJ2': 0.8408973912178247,      'rh_RFJ3': 0.34325412649756837,     \
#                 'rh_MFJ1': 0.014565158522349297,    'rh_MFJ3': 0.4407150002695516,      \
#                 'rh_MFJ2': 0.7245574605990543,      'rh_MFJ4': -0.005447683603367941,   \
#                 'rh_WRJ2': -0.106417846398269,      'rh_WRJ1': -0.07804339747071865     \
#                   }

# wrist joints removed from hand:
# start :: 'rh_WRJ2': -0.08740126759572807,    'rh_WRJ1': -0.009642963029241673    \
# close :: 'rh_WRJ2': -0.103164843927744,      'rh_WRJ1': -0.10998772922135532     \


# --------------- Arm Positions ---------------
arm_start = { \
    'ra_shoulder_pan_joint': -1.6755197683917444, 'ra_elbow_joint': 2.391160726547241, \
    'ra_wrist_1_joint': 2.303798198699951,  'ra_shoulder_lift_joint': -1.5533440748797815,\
    'ra_wrist_3_joint': -3.10664946237673,  'rh_WRJ2': -0.08740126759572807, \
    'rh_WRJ1': -0.009642963029241673,         'ra_wrist_2_joint': -1.5882452170001429 \
            }

arm_pickup = { \
    'ra_shoulder_pan_joint': -0.575897518788473, 'ra_elbow_joint': 2.86228346824646, \
    'ra_wrist_1_joint': 1.6754974126815796,  'ra_shoulder_lift_joint': -1.2914817968951624, \
    'ra_wrist_3_joint': -1.5357773939715784, 'rh_WRJ2': 0.05646164732737393, \
    'rh_WRJ1': -0.10736475895393359,         'ra_wrist_2_joint': -1.5881970564471644 \
            }

arm_exit_pickup = { \
    'ra_shoulder_pan_joint': -0.575909439717428, 'ra_elbow_joint': 2.7576346397399902, \
    'ra_wrist_1_joint': 1.8324915170669556,  'ra_shoulder_lift_joint': -1.4485862890826624, \
    'ra_wrist_3_joint': -1.5358369986163538, 'rh_WRJ2': -0.008102103551746979, \
    'rh_WRJ1': -0.10673035727744258,         'ra_wrist_2_joint': -1.5882094542132776 \
                }

arm_midway = { \
    'ra_shoulder_pan_joint': -1.780236546193258, 'ra_elbow_joint': 2.7576465606689453, \
    'ra_wrist_1_joint': 1.8324674367904663,  'ra_shoulder_lift_joint': -1.4485982100116175, \
    'ra_wrist_3_joint': -1.5358369986163538, 'rh_WRJ2': -0.008395394812687014, \
    'rh_WRJ1': -0.10545759885212826,         'ra_wrist_2_joint': -1.5882094542132776 \
            }

arm_release = { \
    'ra_shoulder_pan_joint': -3.027827803288595, 'ra_elbow_joint': 2.6113691329956055, \
    'ra_wrist_1_joint': 1.8882097005844116,  'ra_shoulder_lift_joint': -1.3068426291095179, \
    'ra_wrist_3_joint': -1.4986370245562952, 'rh_WRJ2': -0.103164843927744, \
    'rh_WRJ1': -0.10998772922135532,         'ra_wrist_2_joint': -1.595231835042135 \
            }


# =============== Main ===============
if __name__ == '__main__':
    slip = Slip()
    # --------------- Movements ---------------
    # Move arm and hand to start position
    joint_goals = arm_start
    arm_commander.move_to_joint_value_target_unsafe(joint_goals, 8, False)
    joint_goals = hand_start
    hand_commander.move_to_joint_value_target_unsafe(joint_goals,8,False)

    # Move arm to pickup location
    joint_goals = arm_pickup
    arm_commander.move_to_joint_value_target_unsafe(joint_goals,5,True)

    # Grab the object with the hand
    joint_goals = hand_close
    hand_commander.move_to_joint_value_target_unsafe(joint_goals, 4, True)

    ## Check for object here using Biotacs---------------

    # Exit the pickup zone
    joint_goals = arm_exit_pickup
    arm_commander.move_to_joint_value_target_unsafe(joint_goals,5,True)

    # Go to the midway point
    joint_goals = arm_midway
    arm_commander.move_to_joint_value_target_unsafe(joint_goals,5,False)

    # Go to the release area
    joint_goals = arm_release
    arm_commander.move_to_joint_value_target_unsafe(joint_goals,5, True)

    time.sleep(2)
    listen()




# # Release the object
# joint_goals = hand_start
# hand_commander.move_to_joint_value_target_unsafe(joint_goals, 2, True)
#
# # Move back to start
# joint_goals = arm_start
# arm_commander.move_to_joint_value_target_unsafe(joint_goals,5,True)
