#!/usr/bin/env python

from __future__ import division
import rospy
from std_msgs.msg import String, Float32, UInt8
import numpy as np # for: exp(), .shape
import numpy.matlib as npm # for: npm.repmat()

#######################################################

# Based on nnfittingtest02result in /data_prelim

#######################################################

def nnfittingtest02result(x1):
    # ---------------------- Input Layer ----------------------------------------------------
    x1_step1_xoffset = np.matrix( \
        [\
            [2886],\
            [3295],\
            [2452],\
            [2736],\
            [2747],\
            [2406],\
            [2962],\
            [3258],\
            [3197],\
            [2871],\
            [3049],\
            [3434],\
            [2512],\
            [2764],\
            [2281],\
            [2537],\
            [2960],\
            [3296],\
            [2826],\
            [2537],\
            [3516],\
            [3327],\
            [3461],\
            [3150],\
            [1225]\
        ] )     # size(x1_step1_xoffset) = 25x1

    x1_step1_gain = np.matrix( \
        [\
            [0.00277008310249307003],\
            [0.00455580865603644972],\
            [0.00161550888529886989],\
            [0.00202020202020202020],\
            [0.00256410256410256020],\
            [0.00158604282315622999],\
            [0.00254129606099110991],\
            [0.00657894736842104966],\
            [0.00526315789473684025],\
            [0.00315955766192733013],\
            [0.00366972477064219987],\
            [0.00735294117647058987],\
            [0.00165562913907285007],\
            [0.00251572327044025015],\
            [0.00173460537727666993],\
            [0.00167785234899329007],\
            [0.00316455696202531988],\
            [0.00896860986547085015],\
            [0.00836820083682007949],\
            [0.00471698113207546978],\
            [0.01136363636363640038],\
            [0.00571428571428570994],\
            [0.01273885350318470014],\
            [0.00558659217877094990],\
            [0.00090950432014552099]\
        ] )     # size(x1_step1_gain) = 25x1

    x1_step1_ymin = -1;


    # -----------------------Layer 1 --------------------------------------------------------

    b1 = np.matrix( \
        [\
            [-1.81684570037015125088],\
            [ 1.56674224602253930883],\
            [ 8.78451927450788083718],\
            [-1.19657095069104402185],\
            [ 0.90885850711814353264],\
            [-5.07531942011179104668],\
            [-1.32290322755529055065],\
            [-1.37760456453458091097],\
            [ 0.73084298317806584144],\
            [ 0.47847279990405722216]\
        ] )     # size(b1) = 10x1

    # size(IW1_1) = 10x25
    IW1_1 = np.matrix( \
        [\
            [ 0.28113511337906882392,   -0.13186563509325066601,   0.43603926626371913855,   0.07547657301787123740,    0.06577801096852246843,  -0.44650070936564834057,  -0.02608400944844901231,   0.13636433308297271627,  -0.08962653514382451503,  -0.15317839092402915635,   0.36543706492177785439,   0.04671206129598474283,  -0.01889972669390053636,  -0.39196675758589211158,   0.41633931197694024062,  -0.22303196205924882833,   0.11206231037824240793,   0.00544388349051119335,  -0.10744871329159834394,  -0.30388946266495397985,  -0.15790671341956330487,   0.07772221747629470823,    0.13572234943564751020,   0.09286514285814825853,  -0.07901027592903550612],\
            [ -0.68846296918022276135,  -0.22530062129738834265,   0.04282421001036264968,   1.18700988145804275931,    0.84646861972173736977,  -0.33854245065510923940,   0.36347589925372414399,    0.82065161442519674040,   0.22948174733230300437,  -0.65189573191674021757,  -0.45255066573038060795,  -1.54242929986389398778,  -0.70713945722822679762,   0.50028259167024424769,   0.88438201370606428497,  -0.60772350889570514454,   0.34989687506998568001,   0.51222159729532423800,   0.77963064932981973598,   -0.41917198891347901002,  -1.72824429150267766531,  -0.58569464392331871405,  -0.51496431496743566569,  -0.21166981501325440873,  -0.51491779677478111132],\
            [ 1.50012821314736610745,    1.41448144658993268941,   5.02247729257881658782,   4.05047882891313015818,    0.86458593410543072011,   2.66908662452568812284,   2.75955384207277232278,   -2.87302719716806320704,   0.06039979713076260720,  -1.00922043042248010813,   9.24527335661147553481,   1.61451284932156613472,  18.90322649392087939191,  10.87340584569369461576,   0.06418890147652837885,  19.03217855276075454185,   7.73582086996653917055,  -4.85140041658681919756,  -0.56011649443646482904,   2.51396512855354181681,  -1.96085014325896245246,  -1.61732784288660780270,  -1.67511373939098651142,  -3.60876063566150806494,  -0.54727341332280510233],\
            [ 0.07816592378129748331,   -0.62743992097844913935,   0.45032526925436999754,  -0.75182678936573044126,   0.00688449420687458572,   1.69489212760724794471,  -0.10414719865865039450,  -0.78991913734419083593,   0.26886746468745853500,   0.80460108416163378386,    0.94334747504208393831,   0.73115752420635671260,   2.48103222271155177125,    1.00052967011808591202,   0.79846882858951850892,   2.05690038856561763225,   -0.28416945846778707274,  -1.23582408018948042283,  -2.18087241734483106015,  -2.58740109885353453123,   0.25539454095579811055,  -0.29563674625240404792,   1.26249927186621380137,   0.70661447325343207382,  -0.41476766363298045448],\
            [ 0.68376586931717275863,    0.02411693624771684905,  -0.73487536936954434008,  -0.23033896018525085170,  -0.13634064327776226899,  -1.08527954457804653998,  -0.25150749574029934719,  -0.29560102133387761159,   1.15386156470710909971,   0.90757279818585878672,   -0.12453488686653617357,  -0.12012203395714565746,  -1.55108000359797926215,  -0.62673220646639793419,  -0.71683733536689520083,  -1.36201518940917098988,  -1.32662342658373599846,   0.29797060385357748702,  -0.07798499001087563776,   2.86891480187418945746,   1.94327029253839822509,   0.27459741246203217546,    0.15518252851227937184,   1.34479457987120576412,   0.10044089519960539003],\
            [ 0.41751475564534651364,   -0.91515667302013004036,   1.03720466787799936448,  -1.65029853709436880038,  -2.65795359490907179278,   1.31161658673065839587,  -0.97439881041397979899,   0.04978283764189016247,   0.52085686781517959165,   0.41349971389308592951,    5.85758943177383883949,   2.89919452255001042218,   6.74148424751550479073,    1.38051463273897279116,  -3.71064856684850452595,  10.12703396827209978426,   3.23553922844819386029,   1.82399173783440526897,   3.72719265676097899487,    3.82778950175090137975,  -0.51461497643904752231,  -1.51711655873901185565,   0.64896818053385030289,  -2.66282739572179272258,   0.08470506333525562592],\
            [ -0.18202041633241955454,   0.34505360804205070790,  -1.62841444338938479142,  -0.69000862387472960968,  -1.41471393611409523849,  -0.72625831876379842722,  -0.18792272236993315393,   0.79507594496405908924,  -1.51396759858840157520,  -0.96236870619063541454,   2.11298550929839956680,   0.68110001668860664648,  -0.72667357572692725665,  -0.03151428580274732300,  -1.10897066207378447444,  -3.29928055173100442943,  -0.12525348333472413609,  -0.26054204071958675382,   1.04344625027138104834,   -0.69652658576218962061,  -1.64560296465750588446,   0.31098921685266228687,   -0.05718515570500336265,  -0.96174647767624843464,   0.24507927725257039331],\
            [ -0.24611248717189668223,   0.06156996821986694679,  -0.52824484432547780255,  -0.51527461457416323665,  -0.75961443748049928271,  -0.11441324901659118141,  -0.73975124594126251409,   0.11708311599169375639,  -0.78480652349922030986,  -0.72316430689463773174,   0.15309003530946951877,  -0.26769958359312678864,  -0.69658353895139724088,   0.25577874729472771520,  -0.31177213281745969065,  -0.59686083759992725195,   0.11037945140733285143,  -0.52688688136203232215,  -0.09626049659569990702,  -0.54242804281807699418,  -0.68102222660132216703,  -0.19648817406767321581,  -0.13310885128012497902,  -0.49800958596826389035,   0.51223624162079406386],\
            [ 0.67691384629314754751,    0.49624380122955946693,   0.07436111215041725508,  -0.03235832374607520989,  -0.52573759123299312890,   0.84748595495279588352,   0.12069159087994948965,    0.29590976330707641218,   0.41146470068552659649,   0.68597662094520850395,    0.24125034749958579328,   0.18863514992388250024,   0.19846567843400872433,   -0.35796476390709425219,  -0.73250442636261570151,  -0.37905526250879945094,  -1.09789709976935268010,   0.58666267219859602466,  -0.08341161329099494592,   0.03973480175715745494,   0.66048517459828026688,  -0.11764048420905687253,   1.09088025830335921817,  -0.61642226773226260761,   0.20816286673771644544],\
            [ 0.08554129423824091694,    1.13394759407927137040,   0.32849733794475416415,   0.40199860992445285435,    0.84347454951915357135,   0.43626957756266537825,  -0.24538892052074157135,   1.42362523750759351060,  -0.29871877488963316516,  -0.13856772821790927508,  -0.08278501305106082675,   0.98877132473737849860,  -0.71977777608066617621,  -0.13766597089187435077,  -1.09560878005331052698,   0.02263733853234717666,    0.78158685343682521296,   1.44952167765551642731,   0.97689262673066468157,    0.08691727356834158535,   0.71976331987939723422,   1.34040738801696646121,   -0.14565429880543637187,   0.12267747953798779914,   0.27365189857160304721]\
        ] )

        # ---------------------- Layer 2 ---------------------------------------------------------
    b2 = 0.33333262499558558023;

    LW2_1 = np.matrix( \
        [\
            [ -0.00000076988937360042,  0.00000002019422933095,  -0.33333337827669756726,   0.00000004463459147978,   0.00000001110310912979,   1.00000000332485328158,  -0.00000000270734364344,  0.00000000151982577956,  -0.00000002716816561023,  -0.00000000147403571672]\
        ])
        # size(LW2_1) = 1x10

        # ----------------------------- Output 1 -------------------------------------------------
    y1_step1_ymin = -1
    y1_step1_gain = 0.00740740740740741;
    y1_step1_xoffset = 0;

    # ===== SIMULATION ========

     # Dimensions
    Q = x1.shape[1]

     # Input 1
    xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    # size = 25x1

     # Layer 1
    a1 = tansig_apply(npm.repmat(b1,1,Q) + np.dot(IW1_1,xp1)) # sending a 10xQ to function
    # size = 10xQ(1)

     # Layer 2
    a2 = npm.repmat(b2,1,Q) + np.dot(LW2_1,a1)

     # Output 1
    y1 = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);

    return y1
# end

 # ---------- MODULE FUNCTIONS ---------------------

 # Map Minimum and Maximum Input Processing Function
def mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin):
    y = x - settings_xoffset
    y = np.multiply(y,settings_gain)
    y = y + settings_ymin
    return(y)

 # Sigmoid Symmetric Transfer Function
def tansig_apply(n):
    a = 2 / (1 + np.exp(-2*n)) -1
    return(a)

 # Map Minimum and Maximum Output Reverse-Processing Function
def mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin):
    x = y - settings_ymin
    x = x / settings_gain
    x = x + settings_xoffset
    return(x)


# ================================ User Inputs ========================================

ep = np.matrix( \
    [\
        [3594],\
        [3720],\
        [3671],\
        [3720],\
        [3498],\
        [3653],\
        [3740],\
        [3540],\
        [3560],\
        [3481],\
        [3213],\
        [3529],\
        [2773],\
        [2991],\
        [2559],\
        [2746],\
        [3129],\
        [3359],\
        [2892],\
        [2629],\
        [3658],\
        [3665],\
        [3522],\
        [3368],\
        [1970]\
    ])

output = nnfittingtest02result(ep)

print(output)
