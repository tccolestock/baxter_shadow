#!/usr/bin/env python

from __future__ import division
import rospy
from std_msgs.msg import String, Float32, UInt8
# from sr_robot_commander.sr_arm_commander import SrArmCommander
from sr_robot_commander.sr_hand_commander import SrHandCommander
from sr_robot_msgs.msg import BiotacAll
import time
import numpy as np # for: exp(), .shape
import numpy.matlib as npm # for: npm.repmat()


rospy.init_node("sr_grasp", anonymous=True)

# arm_commander = SrArmCommander()
hand_commander = SrHandCommander()
time.sleep(1)

class Slip(object):
    """docstring for Slip"""
    def __init__(self):
        self.last3 = [0,0,0,0,0,0,0,0,0,0]
        self.mvavg = 0
    def new(self, x):
        self.last3.pop()
        self.last3.insert(0,x)
        self.update()
    def update(self):
        self.mvavg = sum(self.last3)/len(self.last3)


# hand positions:::
start = { \
            'rh_FFJ1': -0.013387468694274651,   'rh_FFJ2': 0.10550124582950798,     \
            'rh_FFJ3': -0.07913645703418956,    'rh_FFJ4': -0.020790969983510318,   \
            'rh_THJ4': 0.8987090669167258,      'rh_THJ5': -1.0529838245665772,     \
            'rh_THJ1': 0.36613957472880915,     'rh_THJ2': -0.3099264451304632,     \
            'rh_THJ3': 0.04339213288734181,     'rh_LFJ2': 0.31856120196799154,     \
            'rh_LFJ3': -0.13247924347682977,    'rh_LFJ1': 0.020856552138779016,    \
            'rh_LFJ4': 0.006156109478006114,    'rh_LFJ5': 0.030368858695598477,    \
            'rh_RFJ4': -0.017502072148899307,   'rh_RFJ1': 0.04862574836081379,     \
            'rh_RFJ2': 0.23106641618794493,     'rh_RFJ3': -0.040169677117662395,   \
            'rh_MFJ1': 0.0061621824517631985,   'rh_MFJ3': -0.03814186780706377,    \
            'rh_MFJ2': 0.28535536916148746,     'rh_MFJ4': 0.005735133335643892,    \
            'rh_WRJ2': -0.08740126759572807,    'rh_WRJ1': -0.009642963029241673    \
        }

close = { \
            'rh_FFJ1': 0.5366228138727492,      'rh_FFJ2': 1.3707472622836295,      \
            'rh_FFJ3': 0.6104890181588297,      'rh_FFJ4': -0.1693188654196813,     \
            'rh_THJ4': 1.1494816044032174,      'rh_THJ5': -0.25236240595266746,    \
            'rh_THJ1': 1.0564478227578378,      'rh_THJ2': 0.5591902548242037,      \
            'rh_THJ3': 0.3010860128238289,      'rh_LFJ2': 1.1510589476677358,      \
            'rh_LFJ3': 0.3496450123403709,      'rh_LFJ1': 0.2812655031286765,      \
            'rh_LFJ4': 0.0007317935784767475,   'rh_LFJ5': 0.038378063907728126,    \
            'rh_RFJ4': -0.030822436892029084,   'rh_RFJ1': 0.2252787835450361,      \
            'rh_RFJ2': 1.1696882711839942,      'rh_RFJ3': 0.6358242015720096,      \
            'rh_MFJ1': 0.18990725919524606,     'rh_MFJ3': 0.6792600589796994,      \
            'rh_MFJ2': 1.3251573950327318,      'rh_MFJ4': -0.007377111269187729,   \
            'rh_WRJ2': -0.103164843927744,      'rh_WRJ1': -0.10998772922135532     \
        }

soft_open = { \
                'rh_FFJ1': 0.015299964222028228,    'rh_FFJ2': 1.0363475765685581,      \
                'rh_FFJ3': 0.2156981911673815,      'rh_FFJ4': -0.09041898402453244,    \
                'rh_THJ4': 1.1566064166609298,      'rh_THJ5': -0.4976068025062665,     \
                'rh_THJ1': 0.7331455374652653,      'rh_THJ2': 0.24076301002605377,     \
                'rh_THJ3': 0.2482866853523483,      'rh_LFJ2': 0.9579282517503304,      \
                'rh_LFJ3': 0.22891073506641474,     'rh_LFJ1': 0.0369458923601228,      \
                'rh_LFJ4': -0.010122565656606665,   'rh_LFJ5': 0.03884889211514442,     \
                'rh_RFJ4': -0.03515217103578468,    'rh_RFJ1': 0.06709122242188231,     \
                'rh_RFJ2': 0.8408973912178247,      'rh_RFJ3': 0.34325412649756837,     \
                'rh_MFJ1': 0.014565158522349297,    'rh_MFJ3': 0.4407150002695516,      \
                'rh_MFJ2': 0.7245574605990543,      'rh_MFJ4': -0.005447683603367941,   \
                'rh_WRJ2': -0.106417846398269,      'rh_WRJ1': -0.07804339747071865     \
            }


def callback(data):
    ffe1 = data.tactiles[0].electrodes[0]
    # ffe2 = data.tactiles[0].electrodes[1]
    ffe3 = data.tactiles[0].electrodes[2]
    ffe4 = data.tactiles[0].electrodes[3]
    if (ffe1 < 3550) and (ffe3 < 3600) and (ffe4 < 3650):
        # hand_commander.move_to_joint_value_target_unsafe(soft_open, 1, True)
        hand_commander.move_to_joint_value_target_unsafe(start, 1, True)
        time.sleep(1)
        rospy.signal_shutdown("Slip was Detected")

def callback2(data):
    features = list(data.tactiles[0].electrodes) # comes in as a Tuple, convert to list
    features.append(data.tactiles[0].pac1) # append the Pac1 value
    features = np.matrix(features) # convert list to numpy matrix
    angle = nnfittingtest02result(features.T) # transpose matrix to create column vector(s)
    print(angle)
    if (angle > 85) and (angle < 95):
        print("slip detected!")
        hand_commander.move_to_joint_value_target_unsafe(start, 1, True)
        time.sleep(1)
        rospy.signal_shutdown("Slip was Detected")

#######################################################

# Based on nnfittingtest02result in /data_prelim

#######################################################

def nnfittingtest02result(x1): # input all 24 electrodes, and Pac1 in column array
    # ---------------------- Input Layer ----------------------------------------------------
    x1_step1_xoffset = np.matrix( \
        [\
            [2886],\
            [3295],\
            [2452],\
            [2736],\
            [2747],\
            [2406],\
            [2962],\
            [3258],\
            [3197],\
            [2871],\
            [3049],\
            [3434],\
            [2512],\
            [2764],\
            [2281],\
            [2537],\
            [2960],\
            [3296],\
            [2826],\
            [2537],\
            [3516],\
            [3327],\
            [3461],\
            [3150],\
            [1225]\
        ] )     # size(x1_step1_xoffset) = 25x1

    x1_step1_gain = np.matrix( \
        [\
            [   0.00277008310249307003],\
            [   0.00455580865603644972],\
            [   0.00161550888529886989],\
            [   0.00202020202020202020],\
            [   0.00256410256410256020],\
            [   0.00158604282315622999],\
            [   0.00254129606099110991],\
            [   0.00657894736842104966],\
            [   0.00526315789473684025],\
            [   0.00315955766192733013],\
            [   0.00366972477064219987],\
            [   0.00735294117647058987],\
            [   0.00165562913907285007],\
            [   0.00251572327044025015],\
            [   0.00173460537727666993],\
            [   0.00167785234899329007],\
            [   0.00316455696202531988],\
            [   0.00896860986547085015],\
            [   0.00836820083682007949],\
            [   0.00471698113207546978],\
            [   0.01136363636363640038],\
            [   0.00571428571428570994],\
            [   0.01273885350318470014],\
            [   0.00558659217877094990],\
            [   0.00090950432014552099]\
        ] )     # size(x1_step1_gain) = 25x1

    x1_step1_ymin = -1;


    # -----------------------Layer 1 --------------------------------------------------------

    b1 = np.matrix( \
        [\
            [   2.72901648714285061104],\
            [  -1.53891812232267599647],\
            [  -0.54204174839688368248],\
            [   0.51478126714343241943],\
            [   0.04856593983053705821],\
            [  -9.46622248143679811960],\
            [   3.35289830247697073773],\
            [   0.10984911879711270477],\
            [   0.59074902664154094190],\
            [   0.90008418067356166237]\
        ] )     # size(b1) = 10x1

    # size(IW1_1) = 10x25
    IW1_1 = np.matrix( \
        [\
            [ 0.01975373487227891772,    0.62243284794332576215,   0.99893043074307219520,   0.89927358220889408447,    0.76132060330603612552,   0.76219705818842375944,   0.71871396405902376880,   -0.90015526409228441285,  -0.49916058270405888608,  -1.44568142318479320174,   2.02468562992369394138,   1.87257307777121484449,   3.74629248578232454392,    3.46579770083851501639,   1.74247868383286763638,   1.72481203042363162581,    2.76569277665171719960,  -1.23193149442031746332,   0.30606340614536181599,    0.84663257826568349973,  -0.49437963659858275012,   0.00157527876748781597,   -0.10299947899709972765,  -1.23515195820363388179,  -0.85241737206135437255],\
            [ 0.91215831048005946435,    0.34220356903849319385,   1.68277531070058850027,   0.79844896593178815714,    0.33443050322297823707,   0.99595054509448988078,   0.31411558480897394663,    0.18224758458419440532,  -0.03311778009676768358,  -0.05956521010460766319,  -1.07607884172634071795,  -0.93660863190341747675,  -0.96736700837786238072,  -0.30332194777324383850,  -1.71352176201615535867,  -0.75589468710997753664,  -1.25997871804520911176,  -1.26410773270401755042,  -1.32919976848453313956,  -1.49607294982164407138,  -0.15125551848976781510,   0.07533442679504413764,   -0.94367443705591980141,  -0.54672837220081826892,   0.33822248403496746327],\
            [ -0.52633282935614933429,  -0.60947805588386028131,  -0.14504107985765515854,  -0.23959324766708275933,  -0.32432463444361198102,   0.23516646087186232617,   0.10047164902854680002,    1.09257154645091292267,   0.87318067588504499899,   1.28171075239658938116,   -0.49136145778408496509,  -0.98609580686001496730,  -0.74935705398565688462,  -1.22082408358446459218,   0.24879403283419787574,  -0.47696195714552669376,  -0.53390047034496668221,   1.13243891161949417068,   0.61889292093930392546,    0.44604012741930293418,  -0.08840249434771361992,  -0.21853171630340739728,  -0.27536013443948609281,   0.07788300986660863512,   0.04493879800500307636],\
            [ -0.59902143896931114853,  -0.22032574276535532576,  -1.28948310957137568522,  -1.20719202879042075693,  -0.56124425804400612794,  -0.99133413777998857785,  -0.17913518456371027576,  -0.09332146254257341067,   0.03036151814951202482,  -0.17427326499038214846,   0.92918422224095797990,   0.64362385388780674056,   0.72165627951418753749,    0.45404465921314418608,   1.34411831696571515415,   2.06641750415800551366,    1.62759456985081718550,   1.33623196906242869275,   1.32958618496386282715,    0.90841539209840871383,   0.07796577456564397768,  -0.01702014858855963389,   1.35710096933852897294,   1.31128276307030144920,  -0.45867930637519849224],\
            [ 0.71525566352426916961,    0.48034364927431089098,   0.46245639943028288288,   0.19147092246746832966,   -0.00177678002754825897,   0.58555053899293041386,   0.15909194017014408051,   -0.68789023846457564293,   0.23632825285633077272,  -0.34260247842162605547,  -0.11743825527173373802,   0.23249932046500243477,   0.43962554880065557450,    0.20425091520283300550,  -0.95229934118344083949,  -0.11241912962973654722,   0.69588545954097469348,  -0.66544017535803690055,   0.05727143526643641014,    0.62867067862289016666,   0.13810083640949130657,   0.75663136202878011893,    0.31486385615700318574,  -1.00395386593328561631,   0.75844280201667546581],\
            [ -1.11527365766529396041,  -1.10148071207826414586,  -3.05274803811785799823,  -4.37040287095715029864,  -1.83687963119454944483,  -2.62467994736604426365,  -2.58710932517132574660,   2.49399682820298274066,   1.71603782904789770036,   1.01293126446471792867,   -8.99770571434254229359,  -4.94056538189913663217, -16.74558393293077074304, -12.92575216550272010352,  0.09653564004107134666, -14.65230707388264264068, -7.71171590222719416374,   3.89700250981413054419,  -0.22438446309035120496,  -2.07663413367711724433,   2.58414824453061475751,   0.50314122458796595172,    0.91305221945092707170,   3.66594845255791845773,   0.93565564765056985497],\
            [ -0.07964447564846273420,   0.35325211111943227715,  -0.45226138925303877025,   0.75962238969279671785,    2.40576704289232035094,  -0.67552312774009082297,   1.15026211442457038103,   -0.89994719282734303434,  -0.72427257478266371393,  -1.03180160799253406445,  -4.04687130857457599831,  -2.05949197398436423256,  -3.49353043948983543743,  -0.36956437538495073847,   2.43444679011582953976,  -5.01894504396101837074,  -2.74592568011130477856,  -4.12709087593153700624,  -5.09727206463015747318,  -5.81862653506360238964,  -0.16913306147328191487,   1.44165925538671024775,    0.24547210300518337855,   3.57286210279717009186,  -0.19854439601070653088],\
            [ 0.46792873679381163932,    0.19294280642960920380,   0.57341365854667847302,   0.46982258836605383934,   -0.11612333154406756508,   0.41349249535025345281,  -0.56717317608092887582,  -0.74318791451278687354,  -0.57355904527019341277,  -0.41736821984458799539,   0.17551898147494604530,  -0.34448134812249853187,   0.07427171521477411720,    0.33492989906336939621,   0.75703807296901071133,  -0.51044718163301239233,   0.53067327218442528203,  -0.19648189067532631502,   0.10929725856348358748,    0.60374214043947027619,  -0.66481937681372105242,   0.02586126202383284486,   -0.58292355045025046056,  -0.59136413619781169615,  -0.11489141276452818907],\
            [ 0.18213397854635779427,    0.43752958471838726551,   0.26917876139905566601,   0.28488344779999213996,    0.11787701884486696813,  -0.14210945551285125710,   0.09452264868924803443,   -0.39725810655649401726,   0.36312003265928960438,  -0.30094936193334048680,  -0.77319231457560777532,  -0.53827551181746835507,  -0.24765295653935798237,   0.02707693761246098701,  -0.35249619719245589566,   0.19601396584968011627,    0.40430249741300261501,  -0.22701479817288292007,   0.17243754201645697388,    1.83981358706043462981,  -0.51601439967844020540,   0.18839798072927282924,   -0.95019590479310667153,  -1.21863516895304790921,  -0.08814262495851662993],\
            [ -0.18719908226070827717,  -0.52238885896409104070,  -0.54216117046577816385,  -0.24652688812502171478,  -0.88979872730431186501,   0.09349661459449437606,  -0.01256532994115331162,   0.15964371387511042122,   0.14645177545112680884,   0.30810872390225374495,   -0.10451487324019410885,   0.50957960992240047826,  -0.24211075128144105006,   0.50107468113688968803,   1.27497683448296017517,  -0.01871440184814169086,   0.27952572685315074663,   0.83776290724491464523,   0.37681200162835853940,    0.84779465859188285481,   0.13536883592668022547,   0.21360517119817773457,    0.54770385041887270638,   0.15098410488785102279,  -0.20715178933538902495]\
        ] )

        # ---------------------- Layer 2 ---------------------------------------------------------
    b2 = -1.02950247575076517e-07;

    LW2_1 = np.matrix( \
        [\
        [ -0.00001277502380619908,   0.00040858684366049222,  -0.00000046711692616765,   0.00040736166217495096,   -0.00000001296763007579,  -0.50001235977773772490,  -0.49999999015676399594,  -0.00000008888871803555,   0.00000011895293007696,   0.00000125108701547559]\
        ] )
        # size(LW2_1) = 1x10

        # ----------------------------- Output 1 -------------------------------------------------
    y1_step1_ymin = -1;
    y1_step1_gain = 0.0111111111111111;
    y1_step1_xoffset = -90;

    # ===== SIMULATION ========

     # Dimensions
    Q = x1.shape[1]

     # Input 1
    xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    # size = 25x1

     # Layer 1
    a1 = tansig_apply(npm.repmat(b1,1,Q) + np.dot(IW1_1,xp1)) # sending a 10xQ to function
    # size = 10xQ(1)

     # Layer 2
    a2 = npm.repmat(b2,1,Q) + np.dot(LW2_1,a1)

     # Output 1
    y1 = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);

    return y1
# end

# ---------- MODULE FUNCTIONS ---------------------

 # Map Minimum and Maximum Input Processing Function
def mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin):
    y = x - settings_xoffset
    y = np.multiply(y,settings_gain)
    y = y + settings_ymin
    return(y)

# Sigmoid Symmetric Transfer Function
def tansig_apply(n):
    a = 2 / (1 + np.exp(-2*n)) -1
    return(a)

# Map Minimum and Maximum Output Reverse-Processing Function
def mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin):
    x = y - settings_ymin
    x = x / settings_gain
    x = x + settings_xoffset
    return(x)

#---------------------------------------------------------------------------------

def listen():
    rospy.Subscriber("/rh/tactile/", BiotacAll, callback2)
    rospy.spin()

# hand_commander.move_to_joint_value_target_unsafe(start, 3, True)
# hand_commander.move_to_joint_value_target_unsafe(close, 3, True)
# time.sleep(2)

if __name__ == '__main__':
    hand_commander.move_to_joint_value_target_unsafe(start, 1, True)
    hand_commander.move_to_joint_value_target_unsafe(close, 2, True)
    slip = Slip()
    time.sleep(2)
    listen()
