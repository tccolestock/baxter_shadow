#!/usr/bin/env python

from __future__ import division
import rospy
from std_msgs.msg import String, Float32, UInt8
from sr_robot_commander.sr_hand_commander import SrHandCommander
from sr_robot_msgs.msg import BiotacAll
import time
import numpy as np # for: exp(), .shape
import numpy.matlib as npm # for: npm.repmat()

rospy.init_node("my_test", anonymous=True)

hand_commander = SrHandCommander()
time.sleep(1)


def callback(data):
    features = list(data.tactiles[0].electrodes) # comes in as a Tuple, convert to list
    features.append(data.tactiles[0].pac1) # append the Pac1 value
    features.append(data.tactiles[0].pdc) # append the Pac1 value
    features = np.matrix(features) # convert list to numpy matrix
    angle = nnfittingtest02result(features.T) # transpose matrix to create column vector(s)
    print(angle)
    # if (angle > 85) and (angle < 95):
    #     print("slip detected!")
    #     hand_commander.move_to_joint_value_target_unsafe(start, 1, True)
    #     time.sleep(1)
    #     rospy.signal_shutdown("Slip was Detected")

def nnfittingtest02result(x1): # input all 24 electrodes, and Pac1 in column array


    x1_step1_xoffset = np.matrix( \
        [\
        [2310.00000000000000000000],\
        [2622.00000000000000000000],\
        [2124.00000000000000000000],\
        [2354.00000000000000000000],\
        [1816.00000000000000000000],\
        [2042.00000000000000000000],\
        [2481.00000000000000000000],\
        [2480.00000000000000000000],\
        [2532.00000000000000000000],\
        [2091.00000000000000000000],\
        [2204.00000000000000000000],\
        [2811.00000000000000000000],\
        [2177.00000000000000000000],\
        [2430.00000000000000000000],\
        [1915.00000000000000000000],\
        [2171.00000000000000000000],\
        [2470.00000000000000000000],\
        [2550.00000000000000000000],\
        [2328.00000000000000000000],\
        [1905.00000000000000000000],\
        [2758.00000000000000000000],\
        [2644.00000000000000000000],\
        [2795.00000000000000000000],\
        [2380.00000000000000000000],\
        [  10.00000000000000000000],\
        [2059.00000000000000000000]\
        ] )


    x1_step1_gain = np.matrix( \
        [\
        [   0.00152322924600152001],\
        [   0.00180018001800180010],\
        [   0.00126742712294042998],\
        [   0.00149253731343283996],\
        [   0.00120481927710842994],\
        [   0.00120048019207683000],\
        [   0.00160256410256409991],\
        [   0.00185873605947954991],\
        [   0.00186219739292364989],\
        [   0.00130975769482645998],\
        [   0.00135685210312075995],\
        [   0.00214132762312634018],\
        [   0.00129366106080206996],\
        [   0.00175131348511383994],\
        [   0.00135869565217390997],\
        [   0.00129366106080206996],\
        [   0.00179372197309416999],\
        [   0.00207468879668050010],\
        [   0.00264200792602377983],\
        [   0.00179372197309416999],\
        [   0.00207684319833853015],\
        [   0.00191570881226053999],\
        [   0.00229357798165138018],\
        [   0.00179051029543420004],\
        [   0.00048959608323133395],\
        [   0.00264200792602377983]\
        ] )

    x1_step1_ymin = -1

    b1 = np.matrix( \
        [\
        [  -8.45911993479213819569],\
        [   1.09030167732407945458],\
        [   1.03780526090853153498],\
        [  -0.36511305459477266799],\
        [   2.50166540634706180413],\
        [  -0.44111301309071193621],\
        [  -0.88112213766859770470],\
        [  -1.86267367802634375984],\
        [  -6.86057108408698379520],\
        [ -13.68109728630854604603]\
        ] )

    IW1_1 = np.matrix( \
    [\
[  -4.83848883959958619982,  -0.11925389215814241606,   3.22511768622762851066,   4.93690976611481335823,  -0.49436466183246241535,  -0.89243633778552200475,  -2.99991549138317159517,  -0.92373057722246665335,   0.02768123076232849311,   1.22976415217583578965,  -8.91094717333468011589,   1.24492864853121454338,   3.98590019370604586868,   3.61136232469964113534,   2.92724591315112148138,  -3.07185847466129313688,   1.30711885407632966150,   3.07063275172238681066,  -4.63781534368542125435,   3.41423456769589073190,   2.62932551076736009676,  -1.24148210931003100121,  -0.41066165003021715130,   0.94891986214571144576,   1.24590223698738289393,   1.27614856628618089651],\
[   0.68117671188565798168,  -2.60599884386493529931,   2.24640584745207805284,  -1.39007381825131437481,  -1.17216559794451846699,   4.07809247623059256682,   1.23287495373015087985,   1.77938070950352922317,  -3.37803958597318265689,  -4.92474376459132479056,  -1.25948386113726762403,  -0.42324203570425633636,   4.85710540066433260620,  -1.48444771235790229369,  -2.69552875543353342991,  -1.18605697782918539929,   3.21422167554630267006,  -0.44335274112001132885,  -0.05879424188083942626,   8.23757662750356978165,  -0.67125631712190114708,  -1.31603701250342486340,  -0.26741997256487226586,   2.95321671739286317759,   0.22665590121224440945,  -1.97590878710899442439],\
[  -1.06475024484452007734,   1.30871325959571294106,   0.99480773780262898853,   1.54319812984790805110,   0.53304672092350846579,   0.78202342237362765243,   0.08219643827562819749,   0.56011812484117073918,  -0.05242476151107671595,   0.13144728899229335406,  -2.67481923923455422454,  -0.44581390899010103768,  -1.50501154769055700555,  -0.26028739411833906603,   2.85564580362003006542,  -1.00872179691079244535,   0.34859208408881903196,   2.93044879056442786336,   0.49926778644073610547,  -1.83600057616944534189,   0.58927949014266955974,   0.11432453605361048155,   1.18526088702191789714,   0.03133949534988050151,   0.17699868161649487397,  -2.74123630932635142798],\
[   0.01981671592486544675,  -0.07014471976053168745,  -0.91740584545391135052,  -0.37392314959779943129,  -1.09746697167091356029,  -0.86584619097966197820,  -0.50752418741154525783,   0.07379693172943682655,  -0.07390391071500053422,   0.07543726730389573032,   1.47071715795431279261,   0.09123011567438654712,   0.84914617443032325284,   1.10678592681447773849,   0.70592795042110467740,  -0.39831788243316479381,  -0.97349600103289035680,   0.55441184872864779365,  -1.04050127570162587176,   1.61622555183711091864,   0.08477578540147610864,  -0.21775902971913974060,   1.55114162369986807732,   1.39891395312075039747,   0.53272498858530881183,  -0.03908750115769504818],\
[  -1.28013700003245212145,  -3.30972470009254626788,   0.98210528866115753832,  -0.32294442699542763586,  -0.64989187939205583788,   1.46058849748000607605,   0.79375304541226365806,   3.37107762719134651519,  -3.75827040397349376732,  -4.57196221221152576675,  -0.00868024996207600319,   0.68812296811526862950,   3.55060341671898882510,   4.43880688071787954385,  -1.18083706901639251541,  -1.81453460855560222420,   0.61331311109627950628,   1.39544751257564469960,  -2.21195364049755260893,   7.59499525134806408033,  -1.25029941524068988201,  -1.52034726389778285238,  -0.48317007183537152848,   0.95084816118388792994,   0.08714884525945192084,  -0.40987823401371475951],\
[  -0.15314878226131764527,  -0.79696747847024185241,  -0.57973301087170492352,  -1.67962413079629113710,  -1.54558466743371458740,   0.02236133677490542704,  -0.13815168549488432426,  -0.49051296217618978179,   0.29395363068907648385,  -0.38457469139601246910,   1.61086037547295468642,   0.13443517724383061140,  -0.67601242217310364424,  -0.41893498928725853014,   1.52261849458167830562,  -0.92359642003826714074,  -0.18028309323958260912,   0.35387615232882096983,  -0.48607128333441140811,  -1.10025602567291080902,  -0.88036833157946303707,  -1.92170623773742432761,  -1.07847013751184594987,  -0.51216434932820220638,   1.42368811652988536132,  -0.99142579328263058525],\
[  -0.47363836136556869416,   3.51043286635946660823,  -8.27963550676523851735,   0.55113831585261563450,  -0.87196807575614643238,   1.99237277553315994538,  -5.21167845313178101918,   2.00446299364804314536,   1.94469081642178487357,  -4.81465138357454502938,  -2.82878706370931531922,  -1.02867341558263980517,   0.50748598226028496239,   2.70352093612895894026,   0.67775789651916784617,  -6.10553128662143418381,  -1.40528556851007691009,  -2.58927850107168922023,  -0.92899172159426068873,   4.19496551059318534271,   2.20324104199701542584,  -1.06407862900773819703,   1.15896932825554932478,   0.88828047956376798844,  -0.32325198126513721153,   1.29554023063565093565],\
[  -0.65446902825561603656,   0.17261003697888002706,   1.76804405764466920914,   3.17549380843931228213,  -0.64131563532340318812,  -3.75321732650445571977,  -1.97393245909105119473,   0.11840796425125836577,   0.35600861635031316732,   2.07778879173817720982,  -0.75063358799446777692,   2.08839662913165380331,   0.89486530391152596664,  -0.76953648198309898554,  -0.51928178387721612985,   0.27183413055799243718,   2.27369095300211920829,  -0.49370202999332968297,  -0.43951600300515125674,  -0.23349189407476905744,  -1.46585538776159807206,  -0.47107348503972551468,  -0.33660666683025713963,   0.26948446422693389524,   0.73960256088144427089,   0.81017249552786263500],\
[   4.07221641978167170350,  -6.74457754552345090104,  -0.70532886881646794652,   6.03628417768290059797,  -0.40860825800265643259,  -6.55754910643854849184,   7.63568106812303160069,  -2.76615449563833859514,  -5.13383023402015581382,  10.25046960617093283474,  12.05555842414027800658,   3.36688820036222358212,  -6.58416064762505381935,  -4.15780182779922569125,   0.40855554416052419775,   7.02662212744982372925,  -0.18628172214979704657,   1.22836583126453313675,   1.35826379187368062595,   3.28190983025016436159,  -6.35087908429581027292,   3.14379593786169042602,  -2.00812815599124583343,   0.06707759108978197937,   1.60172696886969023744,   1.10207857475376380663],\
[   8.58584387727801612300,  -7.23778127170088225739,   7.42759148324134788055,  -9.09197830809247342643,  -0.83713000836760598222,   6.67958636588248477750, -21.48002735635612836518,   8.79396767594696981973,   9.88559159915596907808,   7.95858476122518965212,   1.01224037926781806895,   0.03399304687810449088,   2.82262170802638667766,   8.55469907589939282389,  -0.80796686178028387371,  -5.61778862966542291701,   4.10877610535643889023,   1.48966118755896093084,  -2.47871547752710963408,  -5.46778706541308423539,   3.90313103136168937368,   3.09160036914649172246,   5.04923184784680234571,  -1.75022643565445212843,  -0.29930696600900968951,  -4.30108657072749878125]\
] )

    b2 =0.124928519622470

    LW2_1 = np.matrix( \
        [\
    [   0.49991666603836598659,   0.12498329109600933573,  -0.00000132967345549139,  -0.00007803353273857163,  -0.37491542415037865110,  -0.00000150738754148386,  -0.12499683755444529476,  -0.00003085769156065381,  -0.37497737389825869236,  -0.12499671420192537408]\
    ] )


    y1_step1_ymin = -1;
    y1_step1_gain = 0.005555555555556;
    y1_step1_xoffset = 0;



    # ===== SIMULATION ========

     # Dimensions
    Q = x1.shape[1]

     # Input 1
    xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    # size = 25x1

     # Layer 1
    a1 = tansig_apply(npm.repmat(b1,1,Q) + np.dot(IW1_1,xp1)) # sending a 10xQ to function
    # size = 10xQ(1)

     # Layer 2
    a2 = npm.repmat(b2,1,Q) + np.dot(LW2_1,a1)

     # Output 1
    y1 = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);

    return y1
# end

# ---------- MODULE FUNCTIONS ---------------------

 # Map Minimum and Maximum Input Processing Function
def mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin):
    y = x - settings_xoffset
    y = np.multiply(y,settings_gain)
    y = y + settings_ymin
    return(y)

# Sigmoid Symmetric Transfer Function
def tansig_apply(n):
    a = 2 / (1 + np.exp(-2*n)) -1
    return(a)

# Map Minimum and Maximum Output Reverse-Processing Function
def mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin):
    x = y - settings_ymin
    x = x / settings_gain
    x = x + settings_xoffset
    return(x)




def listen():
    rospy.Subscriber("/rh/tactile/", BiotacAll, callback)
    rospy.spin()

if __name__ == '__main__':
    listen()
