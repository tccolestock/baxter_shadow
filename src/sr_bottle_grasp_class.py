#!/usr/bin/env python

from __future__ import division
import rospy
from std_msgs.msg import String, Float32, UInt8
# from sr_robot_commander.sr_arm_commander import SrArmCommander
from sr_robot_commander.sr_hand_commander import SrHandCommander
from sr_robot_msgs.msg import BiotacAll
import time
import numpy as np # for: exp(), .shape
import numpy.matlib as npm # for: npm.repmat()


rospy.init_node("sr_grasp", anonymous=True)

# arm_commander = SrArmCommander()
hand_commander = SrHandCommander()
time.sleep(1)

class Slip(object):
    """docstring for Slip"""
    def __init__(self):
        self.last3 = [0,0,0,0,0,0,0,0,0,0]
        self.mvavg = 0
    def new(self, x):
        self.last3.pop()
        self.last3.insert(0,x)
        self.update()
    def update(self):
        self.mvavg = sum(self.last3)/len(self.last3)


# hand positions:::
start = { \
            'rh_FFJ1': -0.013387468694274651,   'rh_FFJ2': 0.10550124582950798,     \
            'rh_FFJ3': -0.07913645703418956,    'rh_FFJ4': -0.020790969983510318,   \
            'rh_THJ4': 0.8987090669167258,      'rh_THJ5': -1.0529838245665772,     \
            'rh_THJ1': 0.36613957472880915,     'rh_THJ2': -0.3099264451304632,     \
            'rh_THJ3': 0.04339213288734181,     'rh_LFJ2': 0.31856120196799154,     \
            'rh_LFJ3': -0.13247924347682977,    'rh_LFJ1': 0.020856552138779016,    \
            'rh_LFJ4': 0.006156109478006114,    'rh_LFJ5': 0.030368858695598477,    \
            'rh_RFJ4': -0.017502072148899307,   'rh_RFJ1': 0.04862574836081379,     \
            'rh_RFJ2': 0.23106641618794493,     'rh_RFJ3': -0.040169677117662395,   \
            'rh_MFJ1': 0.0061621824517631985,   'rh_MFJ3': -0.03814186780706377,    \
            'rh_MFJ2': 0.28535536916148746,     'rh_MFJ4': 0.005735133335643892,    \
            'rh_WRJ2': -0.08740126759572807,    'rh_WRJ1': -0.009642963029241673    \
        }

close = { \
            'rh_FFJ1': 0.5366228138727492,      'rh_FFJ2': 1.3707472622836295,      \
            'rh_FFJ3': 0.6104890181588297,      'rh_FFJ4': -0.1693188654196813,     \
            'rh_THJ4': 1.1494816044032174,      'rh_THJ5': -0.25236240595266746,    \
            'rh_THJ1': 1.0564478227578378,      'rh_THJ2': 0.5591902548242037,      \
            'rh_THJ3': 0.3010860128238289,      'rh_LFJ2': 1.1510589476677358,      \
            'rh_LFJ3': 0.3496450123403709,      'rh_LFJ1': 0.2812655031286765,      \
            'rh_LFJ4': 0.0007317935784767475,   'rh_LFJ5': 0.038378063907728126,    \
            'rh_RFJ4': -0.030822436892029084,   'rh_RFJ1': 0.2252787835450361,      \
            'rh_RFJ2': 1.1696882711839942,      'rh_RFJ3': 0.6358242015720096,      \
            'rh_MFJ1': 0.18990725919524606,     'rh_MFJ3': 0.6792600589796994,      \
            'rh_MFJ2': 1.3251573950327318,      'rh_MFJ4': -0.007377111269187729,   \
            'rh_WRJ2': -0.103164843927744,      'rh_WRJ1': -0.10998772922135532     \
        }

soft_open = { \
                'rh_FFJ1': 0.015299964222028228,    'rh_FFJ2': 1.0363475765685581,      \
                'rh_FFJ3': 0.2156981911673815,      'rh_FFJ4': -0.09041898402453244,    \
                'rh_THJ4': 1.1566064166609298,      'rh_THJ5': -0.4976068025062665,     \
                'rh_THJ1': 0.7331455374652653,      'rh_THJ2': 0.24076301002605377,     \
                'rh_THJ3': 0.2482866853523483,      'rh_LFJ2': 0.9579282517503304,      \
                'rh_LFJ3': 0.22891073506641474,     'rh_LFJ1': 0.0369458923601228,      \
                'rh_LFJ4': -0.010122565656606665,   'rh_LFJ5': 0.03884889211514442,     \
                'rh_RFJ4': -0.03515217103578468,    'rh_RFJ1': 0.06709122242188231,     \
                'rh_RFJ2': 0.8408973912178247,      'rh_RFJ3': 0.34325412649756837,     \
                'rh_MFJ1': 0.014565158522349297,    'rh_MFJ3': 0.4407150002695516,      \
                'rh_MFJ2': 0.7245574605990543,      'rh_MFJ4': -0.005447683603367941,   \
                'rh_WRJ2': -0.106417846398269,      'rh_WRJ1': -0.07804339747071865     \
            }


def callback(data):
    ffe1 = data.tactiles[0].electrodes[0]
    # ffe2 = data.tactiles[0].electrodes[1]
    ffe3 = data.tactiles[0].electrodes[2]
    ffe4 = data.tactiles[0].electrodes[3]
    if (ffe1 < 3550) and (ffe3 < 3600) and (ffe4 < 3650):
        # hand_commander.move_to_joint_value_target_unsafe(soft_open, 1, True)
        hand_commander.move_to_joint_value_target_unsafe(start, 1, True)
        time.sleep(1)
        rospy.signal_shutdown("Slip was Detected")

def callback2(data):
    features = list(data.tactiles[0].electrodes) # comes in as a Tuple, convert to list
    features.append(data.tactiles[0].pac1) # append the Pac1 value
    features = np.matrix(features) # convert list to numpy matrix
    angle = nnfittingtest02result(features.T) # transpose matrix to create column vector(s)
    print(angle)
    if (angle > 85) and (angle < 95):
        print("slip detected!")
        hand_commander.move_to_joint_value_target_unsafe(start, 1, True)
        time.sleep(1)
        rospy.signal_shutdown("Slip was Detected")

def callback3(data):
    features = list(data.tactiles[0].electrodes) # comes in as a Tuple, convert to list
    features.append(data.tactiles[0].pac1) # append the Pac1 value
    features.append(data.tactiles[0].pdc) # append the Pac1 value
    features = np.matrix(features) # convert list to numpy matrix
    angle = nnfittingtest02result(features.T) # transpose matrix to create column vector(s)
    print(angle)
    c = np.argmax(angle, 0)[0,0] # return index of max value, then grab it
    print("c: %s" %c)
    d = {0:'grasp', 1:'open', 2:'down', 3:'up'}
    print(d.get(c, 'none'))





#######################################################

# Based on nnfittingtest02result in /data_prelim

#######################################################

def nnfittingtest02result(x1): # input all 24 electrodes, and Pac1 in column array
    # ---------------------- Input Layer ----------------------------------------------------
    x1_step1_xoffset = np.matrix( \
    [\
[2886.00000000000000000000],\
[3295.00000000000000000000],\
[2452.00000000000000000000],\
[2736.00000000000000000000],\
[2747.00000000000000000000],\
[2406.00000000000000000000],\
[2962.00000000000000000000],\
[3258.00000000000000000000],\
[3197.00000000000000000000],\
[2871.00000000000000000000],\
[3049.00000000000000000000],\
[3434.00000000000000000000],\
[2512.00000000000000000000],\
[2764.00000000000000000000],\
[2281.00000000000000000000],\
[2537.00000000000000000000],\
[2960.00000000000000000000],\
[3296.00000000000000000000],\
[2826.00000000000000000000],\
[2537.00000000000000000000],\
[3516.00000000000000000000],\
[3327.00000000000000000000],\
[3461.00000000000000000000],\
[3150.00000000000000000000],\
[1225.00000000000000000000],\
[2149.00000000000000000000]\
] )     # size(x1_step1_xoffset) = 25x1

    x1_step1_gain = np.matrix( \
    [\
[   0.00277008310249307003],\
[   0.00455580865603644972],\
[   0.00161550888529886989],\
[   0.00202020202020202020],\
[   0.00256410256410256020],\
[   0.00158604282315622999],\
[   0.00254129606099110991],\
[   0.00657894736842104966],\
[   0.00526315789473684025],\
[   0.00315955766192733013],\
[   0.00366972477064219987],\
[   0.00735294117647058987],\
[   0.00165562913907285007],\
[   0.00251572327044025015],\
[   0.00173460537727666993],\
[   0.00167785234899329007],\
[   0.00316455696202531988],\
[   0.00896860986547085015],\
[   0.00836820083682007949],\
[   0.00471698113207546978],\
[   0.01136363636363640038],\
[   0.00571428571428570994],\
[   0.01273885350318470014],\
[   0.00558659217877094990],\
[   0.00090950432014552099],\
[   0.00781250000000000000]\
] )     # size(x1_step1_gain) = 25x1

    x1_step1_ymin = -1;


    # -----------------------Layer 1 --------------------------------------------------------

    b1 = np.matrix( \
    [\
[  -1.40717831801145676351],\
[  -0.96532597784330598234],\
[   1.29815498931829531593],\
[   0.58269975447877908614],\
[  -0.27521285228134495515],\
[   0.37211511395027302429],\
[   0.60906403167908962359],\
[   0.59388180254533617930],\
[  -1.22083691123198745387],\
[  -1.92426691234512614592]\
])     # size(b1) = 10x1

    # size(IW1_1) = 10x25
    IW1_1 = np.matrix( \
    [\
[   0.04024639934132382552,   0.05849212462428790560,  -0.40434840400204513644,   0.41436035075890809143,  -0.16545342349791963832,   0.37447968862883906915,   0.51739575655433800438,  -0.19507593100156711552,   0.31178641144877183855,   0.09467074968541829005,  -0.85438753274582834862,  -0.63276448191054490700,  -1.11429243375531883409,   0.01610106666758777047,   0.86508563070101540671,  -1.14709677327585857221,  -0.18394641389635235651,   0.09640740837158447152,  -0.01601141306240613793,  -0.12228205788957954847,  -0.52375605131018920790,   0.06122409781367604137,   0.07888367505234381016,   0.76843859756273080741,  -0.10308045242824172283,  -1.98227406631760083577],\
[   0.61421265842037831018,  -0.07724699180787254760,  -0.04324051727309177751,   0.13384335290831930743,   0.42516117029043198894,   0.60091884108222293204,   0.56355603383637109527,   0.46569060832587133580,   0.34779373473161662167,  -0.24666449428662970411,  -0.11645509866638360796,  -0.38026681283024182934,  -0.82365721109583123205,  -0.19562356883894610471,   0.20757114524350525619,  -0.69716905947014995437,  -0.39200784563647977921,  -0.37086349595038148319,  -1.00725415845960775130,  -0.73891688372700570220,  -0.33426084442718367873,   0.03345297493670448125,   0.17599775754494159652,  -0.23311799385966486264,   0.00069877213353989568,   0.17750091329825817832],\
[  -0.28145753802934103671,   0.38753317563439532156,  -0.05720787389666095318,   0.44559233427124878002,   0.29723793727327957326,   0.27787079750845594672,   0.05669763431308809387,  -0.01912001246234775603,  -0.03631853153447883731,  -0.55191787005604953098,   1.18370680608789502486,   0.58799803134633155111,   0.76963570943753256692,   1.43866951423173827784,   0.44211079649993917373,   1.29736180314965321436,   1.12292130183557725687,  -0.53782797227009304653,   0.21369435562769459325,   0.14994394662096474646,   0.05198619568318556955,  -0.39951106013952458751,   0.39799970373043952465,   0.27193954323992780564,   0.32947894249444453774,   1.16663315072056117394],\
[  -0.62189778101122283882,   0.08421849189235690314,  -0.34338853514540246259,  -0.48347524335044733679,   0.30773262528758754675,  -0.48660852894915757050,  -0.26178284147223762623,   0.23716409975229985063,  -0.44867361593638510620,  -0.69491249258511433862,   0.08845615316067569067,  -0.10829791652955682302,   0.39414514823314211744,   0.73827667390214668508,   0.13064298757989123434,   0.42146867573340823787,   0.93975954932566441169,   0.13294660774098127076,   0.12602591450730488143,   0.03180076052345923165,  -0.50933492693390769457,   0.39957238640399111995,   0.53474382172654144618,   0.34354352311982921941,  -0.40302148167071094598,  -0.40844562864446920525],\
[   0.07264074255126284907,  -0.29601361808957687982,  -0.08733561106873485858,  -0.47244640880911109582,  -0.61128513037978904343,   0.26640848360131358374,   0.19187624710026202068,  -0.11230548769577271273,  -0.32627214656088660005,   0.02312030262196099195,   0.98754431668057496285,   0.27322859454689846226,   0.39178210210961844639,  -0.19459973709380032347,  -0.01715648419245617909,   0.91650188870312587763,   0.16729998627965816937,   0.51509343523333761539,   0.52830640860762301259,   0.92577018024002799557,  -0.11673984951156637924,   0.22561018991779441256,   0.45140139352421893015,  -0.78959158321149414128,  -0.45303701412715091656,   0.70393331272736203719],\
[   0.10025753990580478503,   0.51191732635513143013,   0.35989793167589795297,   0.21650851997129796911,  -0.26588696229202313237,   0.21037069910168851306,  -0.14917072401426770267,  -0.38286540907224025920,  -0.51410650200172158808,   0.00326950895612493006,   0.32608764281600477464,   0.69648347203310734255,   0.93360390228260203838,   0.35896058725669544032,  -0.06390338726523775437,   0.66567070395188177034,   0.51926752603034331823,   0.40590905260474136051,  -0.13520994713737066739,   0.51319774375095594809,  -0.31952628801601645758,   0.42559079026979823590,  -0.42857733857335655880,  -0.01448667279635439467,   0.16401269784531505302,   0.26036577354656098571],\
[   0.42450236179591499530,   0.11250143824346746368,  -0.39295442506541872207,  -0.26344187148953573940,   0.46408956413185448175,   0.21948393269536825567,  -0.24599750357177757598,   0.36250225662122737003,   0.34795087926917372956,  -0.39801128821824949267,  -0.99581394263574396497,  -0.12492948488064027635,  -0.19695875632112752607,  -0.53788030540134224022,   0.39107351541282325824,  -0.18822853096556357855,  -0.14368959746359777352,  -0.65991593094415035292,  -0.24681304848144788866,  -0.74548023719739908710,  -0.44124284680783665280,  -0.21676625137625532558,   0.06107232447408315890,   0.59468318815363596652,   0.30361837757750681499,  -0.78368041775753694012],\
[   0.45781074267975835346,   0.34820953594431175437,   0.33888972811956630249,  -0.29867348195311788084,   0.11598883599063988803,   0.40778416818244617170,  -0.34582019891164067493,  -0.38116716415887569314,   0.08035093499865633704,   0.59603874883154839281,  -0.16076458139670793401,   0.07937112086579510561,  -0.72065634517525323233,  -0.06419274664173060807,  -0.74936202736890689113,   0.13637835752210267226,  -0.48144178463426534620,  -0.56704436968650295814,  -0.53908389248845489661,  -0.20609737799858768303,  -0.34384414988431954985,   0.10674673489390164305,  -0.81188276664983849429,  -0.69963792885868492100,   0.32086185107945974782,   0.58279639461095178454],\
[  -0.19397691184073662107,   0.28132513503762929252,  -0.23134267070299613378,   0.24989759190785137966,   0.52272818791835651275,  -0.10443977871637724619,  -0.11866031702010232385,   0.06232079375968172658,  -0.18309753975599260545,   0.25916303103433313559,  -0.03617494889833869354,  -0.17035872806327498341,   0.12449923115169422849,  -0.44892426790355044464,  -0.12576000493363750921,   0.42606975599621460526,   0.40439864630176980409,  -0.23505248472665560278,  -0.13437733542027449629,  -0.54126634376313065289,  -0.18701812241693149819,  -0.24198129351137870335,  -0.36007216414350107225,   0.22311528272307595833,   0.46891082461114452773,   0.54834228230309278729],\
[  -0.35244972971245391857,  -0.29050792948891412948,   0.12885558644845088172,  -0.50483096551503015004,  -0.44348441114734954427,   0.44117051023831882484,   0.13591633544852035897,   0.17290145760376568473,   0.50908120744053442230,   0.26870786832197912641,  -1.41952542674003545642,  -1.17167465979349860739,  -1.82085325776778050866,  -1.28650635854765438282,  -0.09037965620706275849,  -1.38887918839855939446,  -1.00888273299109565428,  -0.05176745976013312489,   0.15755106945439614763,  -0.55271701742978718297,   0.07103655617237751574,   0.01564889093503834747,  -0.19738954310677345183,  -0.03519065091194138739,   0.45365592354715933432,  -1.52725903317720068664]\
] )

        # ---------------------- Layer 2 ---------------------------------------------------------
    b2 = np.matrix( \
    [\
[   0.14482179761206662172],\
[  -0.07540406226904053377],\
[   0.95836280683862007379],\
[  -0.28378777320940318241]\
]    )

    LW2_1 = np.matrix( \
    [\
[  -2.45935610516593028407,   1.89052619456164494594,   1.29570207061365083590,  -1.33810869330251680509,  -1.87614056127017558850,  -0.11595407240481946098,  -0.24068738575827913762,   2.25410819596570854983,   0.34960083589924229042,  -2.82074438708055730274],\
[   3.10546314575543291880,  -0.41458416494412564379,   0.76736767064623367940,   2.12427236890789528090,  -1.78906092190761945027,   0.06729404514618832212,   1.58746380096996242415,  -2.06761315716044213886,  -0.94731348863880671107,  -0.37380228278897148497],\
[   0.93579271151900877967,   1.27807652605165200654,  -3.60122155129525189921,  -0.40171095293442871110,  -1.07501204942354977590,  -2.15581664842796039139,   0.27167791608897118305,   1.09536445865540343902,  -1.01324200004949727116,   4.12513626890720264129],\
[  -2.36956710378839652265,  -2.07251887937719336819,   0.33111897803199835666,   0.83451332596936889097,   2.34023605573485804499,   0.91778962473150316193,  -2.48472578653468056942,  -0.47237901124499998007,  -1.21228918976556521159,  -1.37074062746091351883]\
] )
        # size(LW2_1) = 1x10

        # ----------------------------- Output 1 -------------------------------------------------
    # y1_step1_ymin = -1;
    # y1_step1_gain = 0.0111111111111111;
    # y1_step1_xoffset = -90;

    # ===== SIMULATION ========

     # Dimensions
    Q = x1.shape[1]

     # Input 1
    xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    # size = 25x1

     # Layer 1
    a1 = tansig_apply(npm.repmat(b1,1,Q) + np.dot(IW1_1,xp1)) # sending a 10xQ to function
    # size = 10xQ(1)

     # Layer 2
    # a2 = npm.repmat(b2,1,Q) + np.dot(LW2_1,a1)
    a2 = softmax_apply(npm.repmat(b2,1,Q) + np.dot(LW2_1,a1))

     # Output 1
    # y1 = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
    y1 = a2

    return y1
# end

# ---------- MODULE FUNCTIONS ---------------------

 # Map Minimum and Maximum Input Processing Function
def mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin):
    y = x - settings_xoffset
    y = np.multiply(y,settings_gain)
    y = y + settings_ymin
    return(y)

# Sigmoid Symmetric Transfer Function
def tansig_apply(n):
    a = 2 / (1 + np.exp(-2*n)) -1
    return(a)

# Map Minimum and Maximum Output Reverse-Processing Function
def mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin):
    x = y - settings_ymin
    x = x / settings_gain
    x = x + settings_xoffset
    return(x)

def softmax_apply(n): # should be getting a 4 by 1 (Q) matrix
    nmax = np.max(n,0) #find max of each column
    n = n - nmax # subtract max of each column from its respective column
    numer = np.exp(n) # perform exp() on each element
    denom = np.sum(numer, 0) # sum each column
    denom[denom==0] = 1 # [1 if i == 0 else i for i in denom]
    a = numer / denom
    return a



#---------------------------------------------------------------------------------

def listen():
    rospy.Subscriber("/rh/tactile/", BiotacAll, callback3)
    rospy.spin()

# hand_commander.move_to_joint_value_target_unsafe(start, 3, True)
# hand_commander.move_to_joint_value_target_unsafe(close, 3, True)
# time.sleep(2)

if __name__ == '__main__':
    hand_commander.move_to_joint_value_target_unsafe(start, 1, True)
    hand_commander.move_to_joint_value_target_unsafe(close, 2, True)
    slip = Slip()
    time.sleep(2)
    listen()
