#!/usr/bin/env python

from __future__ import division
import rospy
from std_msgs.msg import String, Float32, UInt8
# from sr_robot_commander.sr_arm_commander import SrArmCommander
from sr_robot_commander.sr_hand_commander import SrHandCommander
from sr_robot_msgs.msg import BiotacAll
import time
import numpy as np # for: exp(), .shape
import numpy.matlib as npm # for: npm.repmat()


rospy.init_node("sr_grasp", anonymous=True)

# arm_commander = SrArmCommander()
hand_commander = SrHandCommander()
time.sleep(1)

# class Slip(object):
#     """docstring for Slip"""
#     def __init__(self):
#         self.last3 = [0,0,0,0,0,0,0,0,0,0]
#         self.mvavg = 0
#     def new(self, x):
#         self.last3.pop()
#         self.last3.insert(0,x)
#         self.update()
#     def update(self):
#         self.mvavg = sum(self.last3)/len(self.last3)

class Slip(object):
    """docstring for Slip"""
    def __init__(self):
        self.last3 = [0,0,0]#,0,0] #,0,0,0,0,0]
        self.mvavg = 0
        self.base = [] #np.matrix( np.zeros((26,1)) )
        self.flag = 0
    def new(self, x):
        self.last3.pop()
        self.last3.insert(0,x)
        self.update()
    def update(self):
        self.mvavg = sum(self.last3)/len(self.last3)
    def rebase(self, x):
        self.base = x
        self.flag = 1

# hand positions:::
start = { \
            'rh_FFJ1': -0.013387468694274651,   'rh_FFJ2': 0.10550124582950798,     \
            'rh_FFJ3': -0.07913645703418956,    'rh_FFJ4': -0.020790969983510318,   \
            'rh_THJ4': 0.8987090669167258,      'rh_THJ5': -1.0529838245665772,     \
            'rh_THJ1': 0.36613957472880915,     'rh_THJ2': -0.3099264451304632,     \
            'rh_THJ3': 0.04339213288734181,     'rh_LFJ2': 0.31856120196799154,     \
            'rh_LFJ3': -0.13247924347682977,    'rh_LFJ1': 0.020856552138779016,    \
            'rh_LFJ4': 0.006156109478006114,    'rh_LFJ5': 0.030368858695598477,    \
            'rh_RFJ4': -0.017502072148899307,   'rh_RFJ1': 0.04862574836081379,     \
            'rh_RFJ2': 0.23106641618794493,     'rh_RFJ3': -0.040169677117662395,   \
            'rh_MFJ1': 0.0061621824517631985,   'rh_MFJ3': -0.03814186780706377,    \
            'rh_MFJ2': 0.28535536916148746,     'rh_MFJ4': 0.005735133335643892,    \
            'rh_WRJ2': -0.08740126759572807,    'rh_WRJ1': -0.009642963029241673    \
        }

close = { \
            'rh_FFJ1': 0.5366228138727492,      'rh_FFJ2': 1.3707472622836295,      \
            'rh_FFJ3': 0.6104890181588297,      'rh_FFJ4': -0.1693188654196813,     \
            'rh_THJ4': 1.1494816044032174,      'rh_THJ5': -0.25236240595266746,    \
            'rh_THJ1': 1.0564478227578378,      'rh_THJ2': 0.5591902548242037,      \
            'rh_THJ3': 0.3010860128238289,      'rh_LFJ2': 1.1510589476677358,      \
            'rh_LFJ3': 0.3496450123403709,      'rh_LFJ1': 0.2812655031286765,      \
            'rh_LFJ4': 0.0007317935784767475,   'rh_LFJ5': 0.038378063907728126,    \
            'rh_RFJ4': -0.030822436892029084,   'rh_RFJ1': 0.2252787835450361,      \
            'rh_RFJ2': 1.1696882711839942,      'rh_RFJ3': 0.6358242015720096,      \
            'rh_MFJ1': 0.18990725919524606,     'rh_MFJ3': 0.6792600589796994,      \
            'rh_MFJ2': 1.3251573950327318,      'rh_MFJ4': -0.007377111269187729,   \
            'rh_WRJ2': -0.103164843927744,      'rh_WRJ1': -0.10998772922135532     \
        }

soft_open = { \
                'rh_FFJ1': 0.015299964222028228,    'rh_FFJ2': 1.0363475765685581,      \
                'rh_FFJ3': 0.2156981911673815,      'rh_FFJ4': -0.09041898402453244,    \
                'rh_THJ4': 1.1566064166609298,      'rh_THJ5': -0.4976068025062665,     \
                'rh_THJ1': 0.7331455374652653,      'rh_THJ2': 0.24076301002605377,     \
                'rh_THJ3': 0.2482866853523483,      'rh_LFJ2': 0.9579282517503304,      \
                'rh_LFJ3': 0.22891073506641474,     'rh_LFJ1': 0.0369458923601228,      \
                'rh_LFJ4': -0.010122565656606665,   'rh_LFJ5': 0.03884889211514442,     \
                'rh_RFJ4': -0.03515217103578468,    'rh_RFJ1': 0.06709122242188231,     \
                'rh_RFJ2': 0.8408973912178247,      'rh_RFJ3': 0.34325412649756837,     \
                'rh_MFJ1': 0.014565158522349297,    'rh_MFJ3': 0.4407150002695516,      \
                'rh_MFJ2': 0.7245574605990543,      'rh_MFJ4': -0.005447683603367941,   \
                'rh_WRJ2': -0.106417846398269,      'rh_WRJ1': -0.07804339747071865     \
            }


def callback(data):
    ffe1 = data.tactiles[0].electrodes[0]
    # ffe2 = data.tactiles[0].electrodes[1]
    ffe3 = data.tactiles[0].electrodes[2]
    ffe4 = data.tactiles[0].electrodes[3]
    if (ffe1 < 3550) and (ffe3 < 3600) and (ffe4 < 3650):
        # hand_commander.move_to_joint_value_target_unsafe(soft_open, 1, True)
        hand_commander.move_to_joint_value_target_unsafe(start, 1, True)
        time.sleep(1)
        rospy.signal_shutdown("Slip was Detected")

def callback2(data):
    features = list(data.tactiles[0].electrodes) # comes in as a Tuple, convert to list
    features.append(data.tactiles[0].pac1) # append the Pac1 value
    features = np.matrix(features) # convert list to numpy matrix
    angle = nnfittingtest02result(features.T) # transpose matrix to create column vector(s)
    print(angle)
    if (angle > 85) and (angle < 95):
        print("slip detected!")
        hand_commander.move_to_joint_value_target_unsafe(start, 1, True)
        time.sleep(1)
        rospy.signal_shutdown("Slip was Detected")

def callback3(data):
    features = list(data.tactiles[0].electrodes) # comes in as a Tuple, convert to list
    features.append(data.tactiles[0].pac1) # append the Pac1 value
    # features_fit = features[:] # for use with NN_fit
    # features_fit = np.matrix(features_fit)
    features.append(data.tactiles[0].pdc) # append the Pac1 value
    if slip.flag == 0:
        slip.rebase(features)
    else:
        features_fit = []
        features_fit.extend(slip.base)
        features_fit.extend(features)
        # print(features)
        features = np.matrix(features) # convert list to numpy matrix
        features_fit = np.matrix(features_fit) # convert list to numpy matrix
        classification = nnclassifier(features.T) # transpose matrix to create column vector(s)
        angle = nnfitting(features_fit.T) # transpose matrix to create column vector(s)
        slip.new(angle)

        # print(classification)
        c = np.argmax(classification, 0)[0,0] # return index of max value, then grab it
        # print("c: %s" %c)
        d = {0:'grasp', 1:'open', 2:'down', 3:'up'}
        # print(d.get(c, 'none'))
        print("Class: %s \t Angle: %s" %(d.get(c,'none'), angle))





#######################################################

# Based on nnfittingtest02result in /data_prelim

#######################################################

def nnclassifier(x1): # input all 24 electrodes, and Pac1 in column array
    # ---------------------- Input Layer ----------------------------------------------------
    x1_step1_xoffset = np.matrix( \
    [\
[2886.00000000000000000000],\
[3295.00000000000000000000],\
[2452.00000000000000000000],\
[2736.00000000000000000000],\
[2747.00000000000000000000],\
[2406.00000000000000000000],\
[2962.00000000000000000000],\
[3258.00000000000000000000],\
[3197.00000000000000000000],\
[2871.00000000000000000000],\
[3049.00000000000000000000],\
[3434.00000000000000000000],\
[2512.00000000000000000000],\
[2764.00000000000000000000],\
[2281.00000000000000000000],\
[2537.00000000000000000000],\
[2960.00000000000000000000],\
[3296.00000000000000000000],\
[2826.00000000000000000000],\
[2537.00000000000000000000],\
[3516.00000000000000000000],\
[3327.00000000000000000000],\
[3461.00000000000000000000],\
[3150.00000000000000000000],\
[1225.00000000000000000000],\
[2149.00000000000000000000]\
] )     # size(x1_step1_xoffset) = 25x1

    x1_step1_gain = np.matrix( \
    [\
[   0.00277008310249307003],\
[   0.00455580865603644972],\
[   0.00161550888529886989],\
[   0.00202020202020202020],\
[   0.00256410256410256020],\
[   0.00158604282315622999],\
[   0.00254129606099110991],\
[   0.00657894736842104966],\
[   0.00526315789473684025],\
[   0.00315955766192733013],\
[   0.00366972477064219987],\
[   0.00735294117647058987],\
[   0.00165562913907285007],\
[   0.00251572327044025015],\
[   0.00173460537727666993],\
[   0.00167785234899329007],\
[   0.00316455696202531988],\
[   0.00896860986547085015],\
[   0.00836820083682007949],\
[   0.00471698113207546978],\
[   0.01136363636363640038],\
[   0.00571428571428570994],\
[   0.01273885350318470014],\
[   0.00558659217877094990],\
[   0.00090950432014552099],\
[   0.00781250000000000000]\
] )     # size(x1_step1_gain) = 25x1

    x1_step1_ymin = -1;


    # -----------------------Layer 1 --------------------------------------------------------

    b1 = np.matrix( \
    [\
[  -1.40717831801145676351],\
[  -0.96532597784330598234],\
[   1.29815498931829531593],\
[   0.58269975447877908614],\
[  -0.27521285228134495515],\
[   0.37211511395027302429],\
[   0.60906403167908962359],\
[   0.59388180254533617930],\
[  -1.22083691123198745387],\
[  -1.92426691234512614592]\
])     # size(b1) = 10x1

    # size(IW1_1) = 10x25
    IW1_1 = np.matrix( \
    [\
[   0.04024639934132382552,   0.05849212462428790560,  -0.40434840400204513644,   0.41436035075890809143,  -0.16545342349791963832,   0.37447968862883906915,   0.51739575655433800438,  -0.19507593100156711552,   0.31178641144877183855,   0.09467074968541829005,  -0.85438753274582834862,  -0.63276448191054490700,  -1.11429243375531883409,   0.01610106666758777047,   0.86508563070101540671,  -1.14709677327585857221,  -0.18394641389635235651,   0.09640740837158447152,  -0.01601141306240613793,  -0.12228205788957954847,  -0.52375605131018920790,   0.06122409781367604137,   0.07888367505234381016,   0.76843859756273080741,  -0.10308045242824172283,  -1.98227406631760083577],\
[   0.61421265842037831018,  -0.07724699180787254760,  -0.04324051727309177751,   0.13384335290831930743,   0.42516117029043198894,   0.60091884108222293204,   0.56355603383637109527,   0.46569060832587133580,   0.34779373473161662167,  -0.24666449428662970411,  -0.11645509866638360796,  -0.38026681283024182934,  -0.82365721109583123205,  -0.19562356883894610471,   0.20757114524350525619,  -0.69716905947014995437,  -0.39200784563647977921,  -0.37086349595038148319,  -1.00725415845960775130,  -0.73891688372700570220,  -0.33426084442718367873,   0.03345297493670448125,   0.17599775754494159652,  -0.23311799385966486264,   0.00069877213353989568,   0.17750091329825817832],\
[  -0.28145753802934103671,   0.38753317563439532156,  -0.05720787389666095318,   0.44559233427124878002,   0.29723793727327957326,   0.27787079750845594672,   0.05669763431308809387,  -0.01912001246234775603,  -0.03631853153447883731,  -0.55191787005604953098,   1.18370680608789502486,   0.58799803134633155111,   0.76963570943753256692,   1.43866951423173827784,   0.44211079649993917373,   1.29736180314965321436,   1.12292130183557725687,  -0.53782797227009304653,   0.21369435562769459325,   0.14994394662096474646,   0.05198619568318556955,  -0.39951106013952458751,   0.39799970373043952465,   0.27193954323992780564,   0.32947894249444453774,   1.16663315072056117394],\
[  -0.62189778101122283882,   0.08421849189235690314,  -0.34338853514540246259,  -0.48347524335044733679,   0.30773262528758754675,  -0.48660852894915757050,  -0.26178284147223762623,   0.23716409975229985063,  -0.44867361593638510620,  -0.69491249258511433862,   0.08845615316067569067,  -0.10829791652955682302,   0.39414514823314211744,   0.73827667390214668508,   0.13064298757989123434,   0.42146867573340823787,   0.93975954932566441169,   0.13294660774098127076,   0.12602591450730488143,   0.03180076052345923165,  -0.50933492693390769457,   0.39957238640399111995,   0.53474382172654144618,   0.34354352311982921941,  -0.40302148167071094598,  -0.40844562864446920525],\
[   0.07264074255126284907,  -0.29601361808957687982,  -0.08733561106873485858,  -0.47244640880911109582,  -0.61128513037978904343,   0.26640848360131358374,   0.19187624710026202068,  -0.11230548769577271273,  -0.32627214656088660005,   0.02312030262196099195,   0.98754431668057496285,   0.27322859454689846226,   0.39178210210961844639,  -0.19459973709380032347,  -0.01715648419245617909,   0.91650188870312587763,   0.16729998627965816937,   0.51509343523333761539,   0.52830640860762301259,   0.92577018024002799557,  -0.11673984951156637924,   0.22561018991779441256,   0.45140139352421893015,  -0.78959158321149414128,  -0.45303701412715091656,   0.70393331272736203719],\
[   0.10025753990580478503,   0.51191732635513143013,   0.35989793167589795297,   0.21650851997129796911,  -0.26588696229202313237,   0.21037069910168851306,  -0.14917072401426770267,  -0.38286540907224025920,  -0.51410650200172158808,   0.00326950895612493006,   0.32608764281600477464,   0.69648347203310734255,   0.93360390228260203838,   0.35896058725669544032,  -0.06390338726523775437,   0.66567070395188177034,   0.51926752603034331823,   0.40590905260474136051,  -0.13520994713737066739,   0.51319774375095594809,  -0.31952628801601645758,   0.42559079026979823590,  -0.42857733857335655880,  -0.01448667279635439467,   0.16401269784531505302,   0.26036577354656098571],\
[   0.42450236179591499530,   0.11250143824346746368,  -0.39295442506541872207,  -0.26344187148953573940,   0.46408956413185448175,   0.21948393269536825567,  -0.24599750357177757598,   0.36250225662122737003,   0.34795087926917372956,  -0.39801128821824949267,  -0.99581394263574396497,  -0.12492948488064027635,  -0.19695875632112752607,  -0.53788030540134224022,   0.39107351541282325824,  -0.18822853096556357855,  -0.14368959746359777352,  -0.65991593094415035292,  -0.24681304848144788866,  -0.74548023719739908710,  -0.44124284680783665280,  -0.21676625137625532558,   0.06107232447408315890,   0.59468318815363596652,   0.30361837757750681499,  -0.78368041775753694012],\
[   0.45781074267975835346,   0.34820953594431175437,   0.33888972811956630249,  -0.29867348195311788084,   0.11598883599063988803,   0.40778416818244617170,  -0.34582019891164067493,  -0.38116716415887569314,   0.08035093499865633704,   0.59603874883154839281,  -0.16076458139670793401,   0.07937112086579510561,  -0.72065634517525323233,  -0.06419274664173060807,  -0.74936202736890689113,   0.13637835752210267226,  -0.48144178463426534620,  -0.56704436968650295814,  -0.53908389248845489661,  -0.20609737799858768303,  -0.34384414988431954985,   0.10674673489390164305,  -0.81188276664983849429,  -0.69963792885868492100,   0.32086185107945974782,   0.58279639461095178454],\
[  -0.19397691184073662107,   0.28132513503762929252,  -0.23134267070299613378,   0.24989759190785137966,   0.52272818791835651275,  -0.10443977871637724619,  -0.11866031702010232385,   0.06232079375968172658,  -0.18309753975599260545,   0.25916303103433313559,  -0.03617494889833869354,  -0.17035872806327498341,   0.12449923115169422849,  -0.44892426790355044464,  -0.12576000493363750921,   0.42606975599621460526,   0.40439864630176980409,  -0.23505248472665560278,  -0.13437733542027449629,  -0.54126634376313065289,  -0.18701812241693149819,  -0.24198129351137870335,  -0.36007216414350107225,   0.22311528272307595833,   0.46891082461114452773,   0.54834228230309278729],\
[  -0.35244972971245391857,  -0.29050792948891412948,   0.12885558644845088172,  -0.50483096551503015004,  -0.44348441114734954427,   0.44117051023831882484,   0.13591633544852035897,   0.17290145760376568473,   0.50908120744053442230,   0.26870786832197912641,  -1.41952542674003545642,  -1.17167465979349860739,  -1.82085325776778050866,  -1.28650635854765438282,  -0.09037965620706275849,  -1.38887918839855939446,  -1.00888273299109565428,  -0.05176745976013312489,   0.15755106945439614763,  -0.55271701742978718297,   0.07103655617237751574,   0.01564889093503834747,  -0.19738954310677345183,  -0.03519065091194138739,   0.45365592354715933432,  -1.52725903317720068664]\
] )

        # ---------------------- Layer 2 ---------------------------------------------------------
    b2 = np.matrix( \
    [\
[   0.14482179761206662172],\
[  -0.07540406226904053377],\
[   0.95836280683862007379],\
[  -0.28378777320940318241]\
]    )

    LW2_1 = np.matrix( \
    [\
[  -2.45935610516593028407,   1.89052619456164494594,   1.29570207061365083590,  -1.33810869330251680509,  -1.87614056127017558850,  -0.11595407240481946098,  -0.24068738575827913762,   2.25410819596570854983,   0.34960083589924229042,  -2.82074438708055730274],\
[   3.10546314575543291880,  -0.41458416494412564379,   0.76736767064623367940,   2.12427236890789528090,  -1.78906092190761945027,   0.06729404514618832212,   1.58746380096996242415,  -2.06761315716044213886,  -0.94731348863880671107,  -0.37380228278897148497],\
[   0.93579271151900877967,   1.27807652605165200654,  -3.60122155129525189921,  -0.40171095293442871110,  -1.07501204942354977590,  -2.15581664842796039139,   0.27167791608897118305,   1.09536445865540343902,  -1.01324200004949727116,   4.12513626890720264129],\
[  -2.36956710378839652265,  -2.07251887937719336819,   0.33111897803199835666,   0.83451332596936889097,   2.34023605573485804499,   0.91778962473150316193,  -2.48472578653468056942,  -0.47237901124499998007,  -1.21228918976556521159,  -1.37074062746091351883]\
] )
        # size(LW2_1) = 1x10

        # ----------------------------- Output 1 -------------------------------------------------
    # y1_step1_ymin = -1;
    # y1_step1_gain = 0.0111111111111111;
    # y1_step1_xoffset = -90;

    # ===== SIMULATION ========

     # Dimensions
    Q = x1.shape[1]

     # Input 1
    xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    # size = 25x1

     # Layer 1
    a1 = tansig_apply(npm.repmat(b1,1,Q) + np.dot(IW1_1,xp1)) # sending a 10xQ to function
    # size = 10xQ(1)

     # Layer 2
    # a2 = npm.repmat(b2,1,Q) + np.dot(LW2_1,a1)
    a2 = softmax_apply(npm.repmat(b2,1,Q) + np.dot(LW2_1,a1))

     # Output 1
    # y1 = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
    y1 = a2

    return y1
# end

def nnfitting(x1): # input all 24 electrodes, and Pac1 in column array
    # ---------------------- Input Layer ----------------------------------------------------
    x1_step1_xoffset = np.matrix( \
    [\
[3423.00000000000000000000],\
[3608.00000000000000000000],\
[3480.00000000000000000000],\
[3586.00000000000000000000],\
[3368.00000000000000000000],\
[3437.00000000000000000000],\
[3600.00000000000000000000],\
[3415.00000000000000000000],\
[3427.00000000000000000000],\
[3259.00000000000000000000],\
[3186.00000000000000000000],\
[3492.00000000000000000000],\
[2980.00000000000000000000],\
[3132.00000000000000000000],\
[2550.00000000000000000000],\
[2919.00000000000000000000],\
[3207.00000000000000000000],\
[3295.00000000000000000000],\
[2877.00000000000000000000],\
[2626.00000000000000000000],\
[3564.00000000000000000000],\
[3548.00000000000000000000],\
[3444.00000000000000000000],\
[3249.00000000000000000000],\
[1172.00000000000000000000],\
[2225.00000000000000000000],\
[2807.00000000000000000000],\
[3246.00000000000000000000],\
[2334.00000000000000000000],\
[2675.00000000000000000000],\
[2735.00000000000000000000],\
[2324.00000000000000000000],\
[2962.00000000000000000000],\
[3218.00000000000000000000],\
[3176.00000000000000000000],\
[2816.00000000000000000000],\
[2916.00000000000000000000],\
[3346.00000000000000000000],\
[2454.00000000000000000000],\
[2699.00000000000000000000],\
[2281.00000000000000000000],\
[2513.00000000000000000000],\
[2960.00000000000000000000],\
[3292.00000000000000000000],\
[2824.00000000000000000000],\
[2524.00000000000000000000],\
[3424.00000000000000000000],\
[3240.00000000000000000000],\
[3367.00000000000000000000],\
[3029.00000000000000000000],\
[1172.00000000000000000000],\
[2221.00000000000000000000]\
] )     # size(x1_step1_xoffset) = 25x1

    x1_step1_gain = np.matrix( \
    [\
[   0.01190476190476190063],\
[   0.01652892561983470079],\
[   0.01136363636363640038],\
[   0.01680672268907559830],\
[   0.01388888888888890026],\
[   0.01081081081081079927],\
[   0.01492537313432839956],\
[   0.01360544217687069922],\
[   0.01408450704225350063],\
[   0.00913242009132420041],\
[   0.00970873786407767080],\
[   0.01449275362318840077],\
[   0.00501253132832079999],\
[   0.00917431192660551030],\
[   0.00490196078431372976],\
[   0.00435729847494552985],\
[   0.00851063829787234057],\
[   0.01129943502824859967],\
[   0.01587301587301589989],\
[   0.01041666666666670078],\
[   0.01652892561983470079],\
[   0.01492537313432839956],\
[   0.01324503311258280053],\
[   0.01142857142857140081],\
[   0.00115473441108544989],\
[   0.01117318435754189980],\
[   0.00249687890137327995],\
[   0.00409836065573771034],\
[   0.00146627565982404996],\
[   0.00190114068441065006],\
[   0.00252525252525252980],\
[   0.00147275405007364006],\
[   0.00251889168765742980],\
[   0.00581395348837209034],\
[   0.00497512437810945004],\
[   0.00289855072463767989],\
[   0.00294985250737462993],\
[   0.00555555555555556010],\
[   0.00157977883096367005],\
[   0.00232558139534884021],\
[   0.00216919739696311981],\
[   0.00164473684210526003],\
[   0.00316455696202531988],\
[   0.00881057268722467042],\
[   0.00829875518672198997],\
[   0.00457665903890160011],\
[   0.00746268656716417983],\
[   0.00457665903890160011],\
[   0.00796812749003984050],\
[   0.00510204081632653021],\
[   0.00088809946714031997],\
[   0.01086956521739130058]\
] )     # size(x1_step1_gain) = 25x1

    x1_step1_ymin = -1;


    # -----------------------Layer 1 --------------------------------------------------------

    b1 = np.matrix( \
    [\
[  -1.50510815707324296930],\
[  -1.39337508511764562869],\
[  -0.32886356219958440272],\
[  -0.28089214540501628026],\
[  -0.98183316010321131095],\
[   1.85130410682328871985],\
[  -0.14634373233163225358],\
[   1.67225626896044921033],\
[   5.06085483117886436588],\
[   1.13701585703186291987]\
] )     # size(b1) = 10x1

    # size(IW1_1) = 10x25
    IW1_1 = np.matrix( \
    [\
[   0.20032102296822515419,  -0.28754490278561051220,   0.14099984619823011101,   0.08643324958403644787,   0.20850713419965946627,  -0.23283358362224995664,  -0.00578432694828244498,   0.22053459999506869194,  -0.23993100373572159856,  -0.13960612834694957618,   0.03640697788561670506,   0.17812935136695032257,  -0.35641769281157753557,   0.16658231202642601043,  -0.45266658259335074144,  -0.16936750713158052473,   0.22384142275761642615,  -0.07874342165435176122,  -0.06926376993404093074,   0.35377239380209196673,   0.26701494778130002716,  -0.06703985273947887791,   0.20359119618277987662,   0.03178664226995313313,  -0.50094113068430767832,   0.67832932329666273397,  -0.31985748082630366396,  -0.21116740616202903102,  -0.36264896241879918115,   0.00651578743202164620,  -0.01632356479666938892,   0.21994940658028358516,  -0.06561400042347463601,   0.35881273789045892153,   0.34898785700976886481,   0.29319462024603648587,  -0.19634987731423625412,   0.04036349711534081841,  -0.01435073782910623041,   0.49834310272358989247,  -0.19672141100213147435,  -0.02144088122105523506,   0.21549947764269122841,   0.28693429025898931073,   0.03304966642321547493,   0.42482765996460747360,  -0.18789191117138204223,  -0.20198533603714718954,   0.09983962443263298681,  -0.15084615876547441404,   0.31357844749897151315,   0.30549920847598277529],\
[  -0.10225739775292845557,   0.84970669788309971526,  -0.29488286173981093086,   0.47066536152385607394,  -0.62765131495490433799,   0.87322592987060532188,   0.24952334822129129677,  -0.79331147537855106755,  -0.36744773426847443520,   0.23535367158226522255,  -0.00608661824956945041,  -0.39515244740977240046,   0.21160866319933280266,   0.07060686587571332606,  -0.85085926014917023785,  -0.19835603742124180426,   0.44561749500453023964,  -1.07397088554990216558,  -0.11590499120473915506,   0.23042117903911835120,   0.53599300775230851457,  -0.73738655985212508970,   0.25347418690471162916,  -0.81242972417092418347,  -0.27327511011769423099,  -0.58193410730477201920,   0.07766511138330807473,   0.33063725088795226092,   0.06642100810524188825,  -0.12563488734829189597,   0.01669687740508643548,  -0.04863456910487574947,  -0.10678514843976794069,   0.07661489842136344486,   0.21041365440383533181,   0.46180083584723602419,  -0.05907983361114511889,  -0.21885190201540177801,  -0.22150268799170311218,   1.20199452506371562421,  -0.09586697917899750232,  -0.99987351193115903136,   0.28955880074022305459,   0.00015509762850199929,  -0.37420737498394807119,  -0.18097017648595042916,   0.32680620497658430246,   0.25277625437692274879,  -0.11668801081748168824,   0.07134172047052690646,   0.01793360499529868257,   0.76872689764860235861],\
[   0.13498917692836143178,   0.35582369061774321572,   0.93363701705031665323,  -0.78817108336446006778,  -0.56356604628384487921,  -0.14288940061222160649,   0.11215518589271233907,  -0.37192131746133255676,  -0.89815579648394949785,  -0.39000279591106346011,   0.17291817030608314099,   0.17467774544459394037,  -1.40379758406400645399,  -0.07351108861845320752,  -1.20425397803222811177,  -1.54414748388374167831,  -1.99671418440200687527,  -1.00034796671906023313,  -0.39307426218515278959,  -1.02782287308873199194,   1.60909268791416448785,  -0.51610916703951503770,  -0.09775936446711325223,  -0.46175713686093944332,   0.59894263753558973917,  -2.23694998751762019751,   0.38221036584245227097,  -0.04147281304196498430,   0.49251556250745737175,  -0.14455617564559206101,  -0.51093967653778293858,   0.88002211777158867445,  -0.20591777227947080653,   0.17989531903181446570,  -0.00149889171365070258,  -0.21113092954802464840,   1.60426971960934894312,   1.10899026128729416563,   4.00156785878114806820,   2.36450365628097802784,  -0.06219885230618905220,   2.82737652243383807971,   0.77116730475013073320,   0.22685378700417127562,   0.94168215252373621560,   0.38794373803220760788,   0.27155834185899901945,   0.15266932533741758848,   1.07388354022012544320,   0.77235156333560217590,   0.42240772588683489497,   0.71410938520219868764],\
[   0.04185398779545042303,   0.27391450214047824430,  -0.12478468527937604249,  -0.39945328597414125893,   0.03800508754409554629,  -0.17287312514872718583,   0.60797605259056253235,  -0.64405598822062648523,   0.93176636156925152221,  -0.46667167368713813325,   0.13090274723271741464,   0.23977261834287311171,   0.89362076010064039888,  -0.69555757106046478544,  -0.91672366779339764520,   0.32600569814502605714,  -0.03187026426052588096,  -1.01559625470009495807,  -0.95521476527752036123,  -0.59038503002123621233,  -0.32408652102794921479,  -1.07388216101163469496,  -0.56134516602206974145,   0.84365632452703698263,  -0.01512578628529905045,  -0.05327357028006443618,   0.78949291574161029050,   0.27100395251938080854,   0.06888594318032659203,  -0.34363426372395300401,  -0.43526539581851708682,   0.23510068069805148405,   0.40289758379284085210,   0.79125767628618803862,   0.38883261154506071344,   0.84215958308657556941,  -0.75407567872805991716,  -0.31965401918039793028,  -0.72084584919498684297,  -0.70096897533679047854,  -0.25567434063990157611,   0.38632021348859019172,  -0.22113409567011013679,   0.25563827795663807141,   0.10531736245221685888,  -0.64385574229774999999,  -0.21630693210292101236,  -0.39259595311263356665,   0.54597106215400337259,   0.18422176746042057127,  -0.59880647117548879699,  -0.15135729874484174506],\
[  -0.35824480139835762627,   0.50142235582716365716,  -0.41234962439158384662,  -1.20903039483899843454,   0.10590408470609800895,   0.06867260663379967656,  -0.00848599258193119543,  -0.02128580848906700546,   0.85397158412061591193,   1.69779174726025017250,   0.18409329034933866187,  -0.40794878066819073581,   0.63234128673620015881,  -0.53084094300566864177,  -0.99796016500730666543,   0.13883682347932868595,  -0.11690745885972847473,   0.40891988120596378664,   0.72951277319548735179,   0.64976657585010821894,   0.38514412993977847899,  -0.35102857134431642017,   0.97949432945349057533,  -1.38608016162731995102,   0.53034524152031381483,  -0.16510608264544271440,  -0.44792895027793150353,   0.11218836047300989600,   0.30441865706592341478,   0.46479546878583466452,   0.10173332345006859401,  -0.15398396989312251870,  -0.29030880416526405607,  -0.04845664538473178073,  -0.08334867202825452237,   0.01649823313528453461,  -0.16514333369544439978,  -0.06628347812826096419,   0.73188005432434288799,  -0.12344614164023955116,   0.37764837154758629234,   1.36071599524520414626,  -0.32171702453269596100,  -0.13114175924975798870,  -0.43647889424097752187,  -0.02703479678557973997,  -0.25321224354869842355,  -0.44082348710580721018,  -0.22073914438204300659,  -0.11830339084878312150,  -0.74584748192195293726,  -0.21287717980331907763],\
[  -4.49691658504056501755,  -1.27753249626690368324,  -4.11500626588897588931,   0.82135269104956609709,   3.69222972451237252400,   0.36072107841299605457,  -0.71503596943119052121,  -2.44750380106101106392,  -0.76666607967890443298,   0.13920683966335695159,   1.78159227337947179137,   1.53708686328887478290,  -1.37113272822509424387,  -1.28525235228819911804,  -1.16572443824052629502,  -5.60805710069324447886,  -1.77363367083185896611,  -3.49365664246302909390,  -4.49018919325638865558,   3.44297152267781791934,   0.35436351898089885060,   0.42138576172489250471,   1.45823694917348545275,  -0.62220008311069130436,   0.82324537304688816253,  -4.78097495058598731532,   0.36588150058648527541,  -0.02985880121719818731,   0.57598479844136662997,  -0.12575731322977484750,  -0.50466924996442974471,   0.92240418390325207287,  -0.18617281882205821697,   0.18629145460103530008,  -0.02276258194356549705,  -0.20781232601938223747,   1.55005048144852630720,   1.11524737019323483267,   4.06572161784247221306,   2.31732335867313343769,  -0.15431665302329866662,   2.71432284317362304549,   0.76023952029215047244,   0.22612688198542330031,   0.93027113900535840507,   0.36845368801059913411,   0.27164405391281865043,   0.16352420697599781563,   1.07952247305462067928,   0.76519656027699967105,   0.44489070176015921287,   0.91028363707883430678],\
[  -0.55808548623486431417,  -0.76577534560513738082,  -0.47217470567065905618,   0.91292921139052052304,  -0.41106880843941207004,   1.29679367220520225246,   0.12973354427571881509,  -0.01312287930701178801,   0.62843697623994643209,  -0.66239844850204210314,   0.79785949921817045372,   0.27652329163346339724,  -0.54743569284193138724,   0.94588916910589881937,   0.15127300806991236803,  -0.77945568165294509821,   1.20968981032852318513,   0.43536420777543527461,  -0.45465257541531944874,   0.17878499492535157578,   1.20471118126531839820,  -0.32529933158614032784,  -1.03873458255527939542,  -0.40722683230147965761,  -0.90792285776506076456,   1.10600109918939959464,   0.08730073299490956340,   0.07915317385379888604,  -0.03093434171656097437,  -0.25633825007253535633,  -0.04545889852589959229,   0.28957483409100065463,  -0.26190748669135183180,  -0.30027303602440530428,   0.01111359234444246440,   0.33215897556442436356,  -0.46636415073139864118,  -0.16480986113023954331,  -0.55832251793748821633,  -0.19305505239710801790,   0.39992494957463875505,  -0.89080612774368961304,   0.46550526331922176260,   0.01611123982556270096,  -0.18900232737017022555,  -0.04194907975098452479,   0.07993182987552990837,   0.30539510347778714427,  -0.44630229433658386018,  -0.02308301139973267455,   0.14330632417509739374,   0.02059698531271380445],\
[  -0.03961076585080773593,   0.68079473114435062886,   0.03676185611840601664,  -0.22178494947832155804,   0.30680157795384693786,  -0.28800263381280793995,   0.09625680016057511224,   0.01238224040834549206,   0.43382897566703432224,  -0.04906762192203922845,   0.52877806614771161176,   0.80943412123114277801,   0.25204158186619451953,   0.35960668231850229093,  -0.91758678591173348238,   0.14336234573832631889,  -0.02589601745044242675,  -0.03113573297093263220,  -0.16004366480146484109,  -0.00713346695964027673,   0.40843698618190416028,  -0.13607533009100611365,   0.12779223296385366915,   0.54851204380900975277,   0.18789140706905185785,  -0.11179289047992481410,   0.12275019254539838720,  -0.12826918636605513790,   0.08644003765619202861,  -0.08576293256099377926,   0.03402345764922283522,  -0.20741996627512790385,   0.05261095520854530694,  -0.15068457064064211259,   0.49522352031529992544,   0.15219259046393662782,  -0.10028211546730385340,  -0.51530370115019019650,  -0.71584814213552372397,  -0.54265594682948936622,  -0.72901137954009720410,  -1.28701575350975971901,  -0.45459632206776401375,  -0.21840907986098195837,  -0.61250937361172419493,  -0.11514460308082878626,  -0.08177997981122019089,  -0.09331392526942607069,  -0.22724799775995396800,   0.29860873506697027668,   0.25386207396146714954,   0.69497121515771087541],\
[   6.84250233679700325951,  -1.65202484245724834366,   7.16988574023428704152,   0.44507799589585261835,   1.95499914809776687008,  -2.77227787278621073952,  -4.30030298943951638790,   1.28826326220477249684,  -2.43703857727422468216, -12.40096974167940402367,  -1.77575922253318263522,   1.95649877974715136197,  -2.79484377646861448241,   1.28247488325510983209,   6.96504684869162726812,  -2.84084701162440378397,   0.91428159048023005528,   0.21021132842838075039,  -1.70552326225694228512,  -2.45310159077982348208,  -2.02785338643984003326,   3.98207352850727147597,  -2.56457242091509085569,   5.11033397994223559380,  -0.62999220811988110302,  -1.72865894480612225514,  -0.06827039884663733960,   0.25921493479398233228,   0.17123954803387381185,  -1.11152909064970240038,   0.36899960326155317736,   0.50708869900562258959,  -0.23830539013070051180,   0.19557770042574951219,   0.29814234474643669381,   1.20584802286715198072,  -1.50992599861501153313,  -0.45313773918196975643,  -4.80063626158671752364,  -0.25205982359599166109,  -2.20619110590143341355,  -9.34904568022192883348,  -1.49866682044363530579,  -0.96983502972841717504,  -1.04483234801798774427,  -0.91194162246571275343,   0.23958206784737437478,   0.59122506599762603141,  -0.09281581349735851250,   0.76015228968302739343,   1.34365771108420362090,   4.16207490762868026479],\
[   0.19428250246937109336,  -0.12556016092292324182,  -0.46626840077677295104,  -0.48490701223825388722,   0.25130537945305153613,  -0.70904424787817299514,  -0.15268316916048868537,   0.16155815350523630713,  -0.20202548521260785264,   0.06481846539746317915,   0.00627431795215997387,  -0.17940345763289541892,  -0.08142509805831310565,   0.07401188360256243104,  -0.13765071258816766187,  -0.45293794018010735680,  -0.15368327092077066487,   0.11215035418076287066,   0.64919645355919475271,   0.92208703664815350187,   0.49302768171632610494,   0.33555980814746938501,   0.06609688199044770618,  -0.50235952956228879795,  -0.39418730320629352670,   1.07956938085004816585,   0.43624925228985350634,  -0.40364576699199489207,   0.35389700610262531111,  -0.87127091384290822340,  -0.22915153746275462865,   0.73441523947403053452,   0.19740626100588296032,   0.17694114477266545404,   0.36265604744970314499,   0.15301906779583873686,   0.34718431095037194378,   0.24141866424293190185,   0.50227644584424524510,  -0.01198480099172092271,   0.04470211206625169381,   1.22808986213671067489,   0.31576740832627614441,   0.02792912635019233550,   0.01705460368328167234,  -0.49599841774147335194,   0.10862841523725197401,   0.06766381907655528993,  -0.02760589477958886803,  -0.02516340417535894991,   0.39405090558747296603,  -1.04774530803542820223]\
] )

        # ---------------------- Layer 2 ---------------------------------------------------------
    b2 = -8.645328736722949e-09;

    LW2_1 = np.matrix( \
    [\
[  -0.00000000769264013513,   0.00000000290426565852,  -0.01368115718986634595,   0.00000000736040466798,   0.00000000106303417156,   0.51368117987745487429,   0.00000003844864951859,   0.00000000363950312463,  -0.50000002372089757952,   0.00000000777541380380]\
] )
        # size(LW2_1) = 1x10

        # ----------------------------- Output 1 -------------------------------------------------
    y1_step1_ymin = -1;
    y1_step1_gain = 0.005555555555556;
    y1_step1_xoffset = -180;

    # ===== SIMULATION ========

     # Dimensions
    Q = x1.shape[1]

     # Input 1
    xp1 = mapminmax_apply(x1,x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    # size = 25x1

     # Layer 1
    a1 = tansig_apply(npm.repmat(b1,1,Q) + np.dot(IW1_1,xp1)) # sending a 10xQ to function
    # size = 10xQ(1)

     # Layer 2
    a2 = npm.repmat(b2,1,Q) + np.dot(LW2_1,a1)

     # Output 1
    y1 = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);

    return y1
# end


# ---------- MODULE FUNCTIONS ---------------------

 # Map Minimum and Maximum Input Processing Function
def mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin):
    y = x - settings_xoffset
    y = np.multiply(y,settings_gain)
    y = y + settings_ymin
    return(y)

# Sigmoid Symmetric Transfer Function
def tansig_apply(n):
    a = 2 / (1 + np.exp(-2*n)) -1
    return(a)

# Map Minimum and Maximum Output Reverse-Processing Function
def mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin):
    x = y - settings_ymin
    x = x / settings_gain
    x = x + settings_xoffset
    return(x)

def softmax_apply(n): # should be getting a 4 by 1 (Q) matrix
    nmax = np.max(n,0) #find max of each column
    n = n - nmax # subtract max of each column from its respective column
    numer = np.exp(n) # perform exp() on each element
    denom = np.sum(numer, 0) # sum each column
    denom[denom==0] = 1 # [1 if i == 0 else i for i in denom]
    a = numer / denom
    return a



#---------------------------------------------------------------------------------

def listen():
    rospy.Subscriber("/rh/tactile/", BiotacAll, callback3)
    rospy.spin()

# hand_commander.move_to_joint_value_target_unsafe(start, 3, True)
# hand_commander.move_to_joint_value_target_unsafe(close, 3, True)
# time.sleep(2)

if __name__ == '__main__':
    hand_commander.move_to_joint_value_target_unsafe(start, 1, True)
    hand_commander.move_to_joint_value_target_unsafe(close, 2, True)
    slip = Slip()
    time.sleep(2)
    listen()
